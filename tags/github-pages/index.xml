<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github-Pages on Xuanwo&#39;s Blog</title><link>https://xuanwo.io/tags/github-pages/</link><description>Recent content in Github-Pages on Xuanwo&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 26 Mar 2015 00:22:43 +0000</lastBuildDate><atom:link href="https://xuanwo.io/tags/github-pages/index.xml" rel="self" type="application/rss+xml"/><item><title>史上最详细的Hexo博客搭建图文教程</title><link>https://xuanwo.io/2015/03/26/hexo-intor/</link><pubDate>Thu, 26 Mar 2015 00:22:43 +0000</pubDate><guid>https://xuanwo.io/2015/03/26/hexo-intor/</guid><description>&lt;p&gt;从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。
当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/pulls&#34;&gt;提交PR&lt;/a&gt;，&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/issues&#34;&gt;发布issues&lt;/a&gt;或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索关键词。&lt;em&gt;（是不是会有似曾相识的感觉，= =）&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;
&lt;p&gt;你需要准备好以下软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js环境&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;配置node-js环境&#34;&gt;配置Node.js环境&lt;/h3&gt;
&lt;p&gt;下载Node.js安装文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi&#34;&gt;Windows Installer 32-bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi&#34;&gt;Windows Installer 64-bit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。
如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Nodejs-install.png&#34; alt=&#34;Node.js安装界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;保持默认设置即可，一路Next，安装很快就结束了。
然后我们检查一下是不是要求的组件都安装好了，同时按下&lt;code&gt;Win&lt;/code&gt;和&lt;code&gt;R&lt;/code&gt;，打开运行窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/win-run.png&#34; alt=&#34;Windows的运行界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在新打开的窗口中输入&lt;code&gt;cmd&lt;/code&gt;，敲击回车，打开命令行界面。&lt;em&gt;（下文将直接用&lt;code&gt;打开命令行&lt;/code&gt;来表示以上操作，记住哦~）&lt;/em&gt;
在打开的命令行界面中，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Nodejs-test.png&#34; alt=&#34;Node.js安装测试&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置git环境&#34;&gt;配置Git环境&lt;/h3&gt;
&lt;p&gt;下载Git安装文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe&#34;&gt;Git-2.6.3-64-bit.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就进入了Git的安装界面，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-install.png&#34; alt=&#34;Git安装界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-path-setting.png&#34; alt=&#34;Git PATH设置&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是对上图的解释，不需要了解请直接跳过
Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-test.png&#34; alt=&#34;Git安装测试&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;h2 id=&#34;mac-os&#34;&gt;Mac OS&lt;/h2&gt;
&lt;h1 id=&#34;配置github&#34;&gt;配置Github&lt;/h1&gt;
&lt;h2 id=&#34;注册账号&#34;&gt;注册账号&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果已经拥有账号，请跳过此步~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;，在下图的框中，分别输入自己的用户名，邮箱，密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-sign-up.png&#34; alt=&#34;Github注册&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一定要确认注册，否则无法使用gh-pages！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建代码库&#34;&gt;创建代码库&lt;/h2&gt;
&lt;p&gt;登陆之后，点击页面右上角的加号，选择&lt;code&gt;New repository&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-create-a-new-repo.png&#34; alt=&#34;新建代码库&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入代码库创建页面：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Repository name&lt;/code&gt;下填写&lt;code&gt;yourname.github.io&lt;/code&gt;，&lt;code&gt;Description (optional)&lt;/code&gt;下填写一些简单的描述（不写也没有关系），如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-new-repo-setting.png&#34; alt=&#34;代码库设置&#34; /&gt;&lt;/p&gt;
&lt;p&gt;正确创建之后，你将会看到如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-new-repo-look-like.png&#34; alt=&#34;新代码库的界面&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;开启gh-pages功能&#34;&gt;开启gh-pages功能&lt;/h2&gt;
&lt;p&gt;点击界面右侧的&lt;code&gt;Settings&lt;/code&gt;，你将会打开这个库的setting页面，向下拖动，直到看见&lt;code&gt;GitHub Pages&lt;/code&gt;，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-pages.png&#34; alt=&#34;Github pages&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Automatic page generator&lt;/code&gt;，Github将会自动替你创建出一个gh-pages的页面。
如果你的配置没有问题，那么大约15分钟之后，&lt;code&gt;yourname.github.io&lt;/code&gt;这个网址就可以正常访问了~
如果&lt;code&gt;yourname.github.io&lt;/code&gt;已经可以正常访问了，那么Github一侧的配置已经全部结束了。&lt;/p&gt;
&lt;h1 id=&#34;配置hexo&#34;&gt;配置Hexo&lt;/h1&gt;
&lt;h2 id=&#34;安装hexo&#34;&gt;安装Hexo&lt;/h2&gt;
&lt;p&gt;在自己认为合适的地方创建一个文件夹，然后在文件夹空白处按住&lt;code&gt;Shift&lt;/code&gt;+鼠标右键，然后点击在此处打开命令行窗口。&lt;em&gt;（同样要记住啦，下文中会使用&lt;code&gt;在当前目录打开命令行&lt;/code&gt;来代指上述的操作）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在命令行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后你将会看到:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/npm-install-hexo-cli.png&#34; alt=&#34;安装hexo-cli&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可能你会看到一个&lt;code&gt;WARN&lt;/code&gt;，但是不用担心，这不会影响你的正常使用。
然后输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。
在命令行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你看到了如图文字，则说明已经安装成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-v.png&#34; alt=&#34;Hexo测试&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;初始化hexo&#34;&gt;初始化Hexo&lt;/h2&gt;
&lt;p&gt;接着上面的操作，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-init.png&#34; alt=&#34;hexo初始化&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后npm将会自动安装你需要的组件，只需要等待npm操作即可。&lt;/p&gt;
&lt;h2 id=&#34;首次体验hexo&#34;&gt;首次体验Hexo&lt;/h2&gt;
&lt;p&gt;继续操作，同样是在命令行中，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-g.png&#34; alt=&#34;hexo渲染&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后会提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中打开&lt;code&gt;http://localhost:4000/&lt;/code&gt;，你将会看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-first-time.png&#34; alt=&#34;hexo初体验&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，Hexo在本地的配置已经全都结束了。&lt;/p&gt;
&lt;h1 id=&#34;使用hexo&#34;&gt;使用Hexo&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置过程中请使用&lt;a href=&#34;http://www.yamllint.com/&#34;&gt;yamllint&lt;/a&gt;来保证自己的yaml语法正确&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;修改全局配置文件&#34;&gt;修改全局配置文件&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此段落引用自&lt;a href=&#34;http://hexo.io/zh-cn/docs/configuration.html&#34;&gt;Hexo官方文档&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;您可以在 &lt;code&gt;_config.yml&lt;/code&gt; 中修改大部份的配置。&lt;/p&gt;
&lt;h3 id=&#34;网站&#34;&gt;网站&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;subtitle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站副标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;您的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;language&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站使用的语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站时区。Hexo 默认使用您电脑的时区。&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;时区列表&lt;/a&gt;。比如说：&lt;code&gt;America/New_York&lt;/code&gt;, &lt;code&gt;Japan&lt;/code&gt;, 和 &lt;code&gt;UTC&lt;/code&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;网址&#34;&gt;网址&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站根目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;permalink&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的 &lt;a href=&#34;permalinks.html&#34;&gt;永久链接&lt;/a&gt; 格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;permalink_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;永久链接中各部分的默认值&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您的网站存放在子目录中，例如 &lt;code&gt;http://yoursite.com/blog&lt;/code&gt;，则请将您的 &lt;code&gt;url&lt;/code&gt; 设为 &lt;code&gt;http://yoursite.com/blog&lt;/code&gt; 并把 &lt;code&gt;root&lt;/code&gt; 设为 &lt;code&gt;/blog/&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;source_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;资源文件夹，这个文件夹用来存放内容。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;public_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;公共文件夹，这个文件夹用于存放生成的站点文件。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;public&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标签文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;archive_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;归档文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;archives&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分类文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;categories&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;code_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Include code 文件夹&lt;/td&gt;
&lt;td&gt;`downloads/code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i18n_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;国际化（i18n）文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lang&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skip_render&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;跳过指定文件的渲染，您可使用 &lt;a href=&#34;https://github.com/isaacs/node-glob&#34;&gt;glob 表达式&lt;/a&gt;来匹配路径。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;文章&#34;&gt;文章&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;new_post_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新文章的文件名称&lt;/td&gt;
&lt;td&gt;:title.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_layout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;预设布局&lt;/td&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto_spacing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在中文和英文之间加入空格&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;titlecase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把标题转换为 title case&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;external_link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在新标签中打开链接&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filename_case&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把文件名称转换为 (1) 小写或 (2) 大写&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;render_drafts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示草稿&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;post_asset_folder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;启动 &lt;a href=&#34;asset-folders.html&#34;&gt;Asset 文件夹&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;relative_link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把链接改为与根目录的相对位址&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;future&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示未来的文章&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代码块的设置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分类-标签&#34;&gt;分类 &amp;amp; 标签&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认分类&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uncategorized&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分类别名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标签别名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;日期-时间格式&#34;&gt;日期 / 时间格式&lt;/h3&gt;
&lt;p&gt;Hexo 使用 &lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt; 来解析和显示时间。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日期格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;MMM D YYYY&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;时间格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;H:mm:ss&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分页&#34;&gt;分页&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;per_page&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每页显示的文章量 (0 = 关闭分页功能)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pagination_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分页目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;page&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;扩展&#34;&gt;扩展&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前主题名称。值为&lt;code&gt;false&lt;/code&gt;时禁用主题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部署部分的设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;配置deployment&#34;&gt;配置Deployment&lt;/h2&gt;
&lt;p&gt;首先，你需要为自己配置身份信息，打开命令行，然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;yourname&amp;quot;
git config --global user.email &amp;quot;youremail&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样在&lt;code&gt;_config.yml&lt;/code&gt;文件中，找到&lt;code&gt;Deployment&lt;/code&gt;，然后按照如下修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
type: git
repo: git@github.com:yourname/yourname.github.io.git
branch: master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用git方式进行部署，执行&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;来安装所需的插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后在当前目录打开命令行，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。
然后通过&lt;a href=&#34;http://yourname.github.io/来访问自己刚刚上传的网站。&#34;&gt;http://yourname.github.io/来访问自己刚刚上传的网站。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;添加新文章&#34;&gt;添加新文章&lt;/h2&gt;
&lt;p&gt;打开Hexo目录下的&lt;code&gt;source&lt;/code&gt;文件夹，所有的文章都会以md形式保存在&lt;code&gt;_post&lt;/code&gt;文件夹中，只要在&lt;code&gt;_post&lt;/code&gt;文件夹中新建md类型的文档，就能在执行&lt;code&gt;hexo g&lt;/code&gt;的时候被渲染。
新建的文章头需要添加一些yml信息，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: hello-world //在此处添加你的标题。
date: 2014-11-7 08:55:29 //在此处输入你编辑这篇文章的时间。
categories: Code //在此处输入这篇文章的分类。
toc: true //在此处设定是否开启目录，需要主题支持。
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;进阶&#34;&gt;进阶&lt;/h1&gt;
&lt;p&gt;如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。&lt;/p&gt;
&lt;h2 id=&#34;更换主题&#34;&gt;更换主题&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;可以在&lt;a href=&#34;https://github.com/hexojs/hexo/wiki/Themes&#34;&gt;此处&lt;/a&gt;寻找自己喜欢的主题&lt;/em&gt;
下载所有的主题文件，保存到Hexo目录下的&lt;code&gt;themes&lt;/code&gt;文件夹下。然后在&lt;code&gt;_config.yml&lt;/code&gt;文件中修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Extensions
## Plugins: http://hexo.io/plugins/
## Themes: http://hexo.io/themes/
theme: landscape //themes文件夹中对应文件夹的名称
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后先执行&lt;code&gt;hexo clean&lt;/code&gt;，然后重新&lt;code&gt;hexo g&lt;/code&gt;，并且&lt;code&gt;hexo d&lt;/code&gt;，很快就能看到新主题的效果了~&lt;/p&gt;
&lt;h2 id=&#34;更换域名&#34;&gt;更换域名&lt;/h2&gt;
&lt;p&gt;首先，需要注册一个域名。在中国的话，&lt;code&gt;.cn&lt;/code&gt;全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;godaddy&lt;/a&gt;或&lt;a href=&#34;http://www.xinnet.com/&#34;&gt;新网&lt;/a&gt;或&lt;a href=&#34;http://www.xinnet.com/&#34;&gt;万网&lt;/a&gt;中的任意一家，自己权衡价格即可。
然后，我们需要配置一下域名解析。推荐使用DNSPod的服务，比较稳定，解析速度比较快。在域名注册商出修改NS服务器地址为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f1g1ns1.dnspod.net
f1g1ns2.dnspod.net
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以新网为例，首先点击域名管理进入管理页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-setting.png&#34; alt=&#34;点击域名管理&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后点击域名后面的&lt;code&gt;管理&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/mydomin.png&#34; alt=&#34;管理&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入域名管理的操作界面，点击&lt;code&gt;域名管理&lt;/code&gt;，来到域名管理界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-config.png&#34; alt=&#34;终于来到了域名管理= =&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;修改域名DNS&lt;/code&gt;，然后选择&lt;code&gt;填写具体信息&lt;/code&gt;，在下面的空框中填入DNSPod的NS服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-dnspod.png&#34; alt=&#34;使用DNSPod的服务器&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我们进入DNSPod的界面，开始真正进入域名解析的配置= =。在DNSPod中，首先添加域名，然后分别添加如下条目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/dnspod-setting.png&#34; alt=&#34;配置DNS解析&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后，我们对Github进行一下配置。&lt;/p&gt;
&lt;p&gt;在自己本地的hexo目录下的&lt;code&gt;source&lt;/code&gt;文件夹中，新建一个&lt;code&gt;CNAME&lt;/code&gt;文件*（注意，没有后缀名。）*，内容为&lt;code&gt;yourdomin.xxx&lt;/code&gt;。然后再执行一下&lt;code&gt;hexo d -g&lt;/code&gt;，重新上传自己的博客。
在github中打开你自己的库，进入库的setting界面，如果看到了如下提示，说明配置成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-domin.png&#34; alt=&#34;Github-pages绑定自定义域名&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在这一系列的操作中，包括修改NS服务器，设置A解析等等，都需要一定的时间。短则10分钟，长则24小时，最长不会超过72小时。如果超过72小时，请检查自己的配置过程，或者修改自己本地的DNS服务器。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年03月26日 完成了基础架构，慢慢添加进阶技巧= =。&lt;/li&gt;
&lt;li&gt;2015年03月31日 添加了CNAME的相关内容。&lt;/li&gt;
&lt;li&gt;2015年04月30日 修复了错误的git命令。&lt;/li&gt;
&lt;li&gt;2015年06月11日 更新了&lt;code&gt;.config_yml&lt;/code&gt;配置&lt;/li&gt;
&lt;li&gt;2015年10月12日 完善了Deployment部分操作，添加了yaml语法检测网址&lt;/li&gt;
&lt;li&gt;2015年12月09日 更新软件版本，为Hexo 3.2做准备&lt;/li&gt;
&lt;li&gt;2016年11月06日 修复Typo on Jekyll&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Github SSH Key以免去Hexo部署时输入密码</title><link>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</link><pubDate>Sat, 07 Feb 2015 14:40:16 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</guid><description>&lt;p&gt;原文本来放在&lt;a href=&#34;http://xuanwo.io/2014/08/14/hexo-usual-problem/&#34;&gt;Hexo常见问题解决方案&lt;/a&gt;之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。&lt;/p&gt;
&lt;h1 id=&#34;操作&#34;&gt;操作&lt;/h1&gt;
&lt;h2 id=&#34;修改-config-yml&#34;&gt;修改_config.yml&lt;/h2&gt;
&lt;p&gt;将_config.yml的git信息修改为SSH形式。&lt;/p&gt;
&lt;h2 id=&#34;列出已存在的ssh-key&#34;&gt;列出已存在的SSH Key&lt;/h2&gt;
&lt;p&gt;打开Git Bash，并且输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令会列出你&lt;code&gt;.ssh&lt;/code&gt;账户中已经存在的SSH key，如果之前没有设置过，一般都是没有。&lt;/p&gt;
&lt;h2 id=&#34;生成密钥&#34;&gt;生成密钥&lt;/h2&gt;
&lt;p&gt;然后输入：
&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;&lt;/code&gt;
这个命令将会生成一个以&lt;code&gt;your_email@example.com&lt;/code&gt;为标签的ssh key，然后bash中会显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接回车，然后出现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为追求操作方便，我们不打算在deploy的时候输入这个&lt;code&gt;passphrase&lt;/code&gt;，所以直接回车两次设为空。然后你会看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your identification has been saved in ~/.ssh/id_rsa.
Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;加入ssh-agent&#34;&gt;加入SSH Agent&lt;/h2&gt;
&lt;p&gt;下一步输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-agent -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果出现类似&lt;code&gt;Agent pid XXXX&lt;/code&gt;这样的字样，则跳过下一步，否则输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval `ssh-agent -s`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直到出现&lt;code&gt;Agent pid XXXX&lt;/code&gt;这样的提示之后，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，你成功的在本地生成了一个可用的SSH key。&lt;/p&gt;
&lt;h2 id=&#34;将ssh-key添加到github中&#34;&gt;将SSH Key添加到Github中&lt;/h2&gt;
&lt;p&gt;下面将这个key添加到github网站。
打开&lt;a href=&#34;https://github.com/settings/ssh&#34;&gt;https://github.com/settings/ssh&lt;/a&gt;，点击&lt;code&gt;Add SSH Key&lt;/code&gt;，复制&lt;code&gt;id_rsa.pub&lt;/code&gt;中的所有内容到&lt;code&gt;Key&lt;/code&gt;框中，在&lt;code&gt;Title&lt;/code&gt;框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。
当网页显示添加成功后，就已经完成了全部的操作。
下面进行一些测试，同样是打开Git Bash，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bash中会显示如下字样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入yes之后，计算机会自动将&lt;code&gt;github.com&lt;/code&gt;列入已知的host，然后会出现如下提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi username! You&#39;ve successfully authenticated, but GitHub does not
provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果成功看见，说明你已经配置好了，快去享受爽快的hexo一键部署吧；
如果出现任何错误提示，请仔细检查自己的操作，或者将错误信息发给我。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年02月07日 独立成篇&lt;/li&gt;
&lt;li&gt;2015年02月16日 补充&lt;code&gt;_config.yml&lt;/code&gt;的修改&lt;/li&gt;
&lt;li&gt;2015年03月22日 修复了一处代码显示BUG&lt;/li&gt;
&lt;li&gt;2016年04月07日 修复了部分代码格式问题&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Travis CI自动部署Hexo</title><link>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</link><pubDate>Sat, 07 Feb 2015 14:00:51 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</guid><description>&lt;p&gt;前两天了解到了一个有趣的概念叫持续集成：
&amp;gt; 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。
然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？&lt;/p&gt;
&lt;p&gt;在这样的指导思想下，我完成了上一篇文章：&lt;a href=&#34;https://xuanwo.io/2015/02/05/VPS-Hexo-Autodeploy/&#34;&gt;VPS搭配Github Webhook实现Hexo自动发布&lt;/a&gt;，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。&lt;/p&gt;
&lt;h1 id=&#34;好处&#34;&gt;好处&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行&lt;code&gt;hexo d -g&lt;/code&gt;的麻烦，更不必说文章增多之后渲染时间还会增长。&lt;/li&gt;
&lt;li&gt;稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用&lt;code&gt;Travis CI&lt;/code&gt;，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。&lt;/li&gt;
&lt;li&gt;快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~&lt;/li&gt;
&lt;li&gt;协作：博客的构建完全交由&lt;code&gt;Travis CI&lt;/code&gt;进行，所以完全可以通过&lt;code&gt;Hexo&lt;/code&gt;+&lt;code&gt;git&lt;/code&gt;构建一个多人协作的博客平台。实际上，Hexo的&lt;a href=&#34;https://hexo.io/&#34;&gt;官网&lt;/a&gt;正是这样构建的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;travis-ci介绍&#34;&gt;Travis CI介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。
它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。
2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是几个特性：
- 只支持Github
- 支持JavaScript
- 开源，免费&lt;/p&gt;
&lt;p&gt;然后介绍一下它的原理：
Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行&lt;code&gt;sudo&lt;/code&gt;来进行&lt;code&gt;apt-get install&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;travis-ci配置&#34;&gt;Travis CI配置&lt;/h1&gt;
&lt;p&gt;我们知道，Hexo的命令非常简单，一个&lt;code&gt;hexo d -g&lt;/code&gt;就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感谢Hexo作者&lt;a href=&#34;http://zespia.tw/&#34;&gt;tommy351&lt;/a&gt;提供的操作流程，原文可见于&lt;a href=&#34;http://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/&#34;&gt;用 Travis CI 自動部署網站到 GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;生成ssh-key&#34;&gt;生成SSH Key&lt;/h2&gt;
&lt;p&gt;参见&lt;a href=&#34;http://xuanwo.io/2015/02/07/generate-a-ssh-key/&#34;&gt;使用Github SSH Key以免去Hexo部署时输入密码&lt;/a&gt;
需要注意的是，这个SSH key不应成为你账号的全局SSH key*（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）*，而应该添加至&lt;a href=&#34;https://github.com/username/ropename/settings/keys&#34;&gt;https://github.com/username/ropename/settings/keys&lt;/a&gt; ，这样，你就控制了Travis CI的权限。&lt;/p&gt;
&lt;h2 id=&#34;加密私钥&#34;&gt;加密私钥&lt;/h2&gt;
&lt;p&gt;下面的操作需要事先配置好gem环境，如果没有可以尝试使用&lt;a href=&#34;http://xuanwo.io/2014/08/07/Cloud9/&#34;&gt;强大且配置项丰富的在线IDE应用——Cloud9&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;安装travis-ci的命令行工具&#34;&gt;安装Travis CI的命令行工具&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;登陆travis-ci&#34;&gt;登陆Travis CI&lt;/h3&gt;
&lt;p&gt;需要输入Github账号和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;travis login --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;加密私钥并上传至travis&#34;&gt;加密私钥并上传至Travis&lt;/h3&gt;
&lt;p&gt;正确生成后你会得到两个文件，一个叫&lt;code&gt;ssh_key&lt;/code&gt;，一个叫&lt;code&gt;ssh_key.pub&lt;/code&gt;。刚才我们将&lt;code&gt;ssh_key.pub&lt;/code&gt;添加到了github，下面我们要加密&lt;code&gt;ssh_key&lt;/code&gt;这个私钥并且上传到Travis。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;travis encrypt-file ssh_key --add
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后Travis的客户端会自动检测当前目录中的git信息，并且添加到&lt;code&gt;.travis.yml&lt;/code&gt;中去。在进行此步操作前，目录下要先存在&lt;code&gt;.travis.yml&lt;/code&gt;文件，否则会报错。&lt;/p&gt;
&lt;h3 id=&#34;指定ssh设置&#34;&gt;指定SSH设置&lt;/h3&gt;
&lt;p&gt;在当前目录下新建文件&lt;code&gt;ssh_config&lt;/code&gt;，内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host github.com
User git
StrictHostKeyChecking no
IdentityFile ~/.ssh/id_rsa
IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- openssl aes-256-cbc -K $encrypted_xxxxxxxxxx_key -iv $encrypted_xxxxxxxxxx_iv
-in travis.enc -out ~/.ssh/id_rsa -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改目录权限&#34;&gt;修改目录权限&lt;/h3&gt;
&lt;p&gt;紧跟那条解密指令，换行输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- chmod 600 ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意yml格式，短杠后面的空格不能省略。&lt;/p&gt;
&lt;h3 id=&#34;将密钥加入系统&#34;&gt;将密钥加入系统&lt;/h3&gt;
&lt;p&gt;紧跟上一步操作，换行输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- eval $(ssh-agent)
- ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改git信息&#34;&gt;修改git信息&lt;/h3&gt;
&lt;p&gt;将之前创建的ssh_config复制到Travis的虚拟机中去，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- cp ssh_config ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后指定git使用者信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- git config --global user.name &amp;quot;username&amp;quot;
- git config --global user.email username@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;build配置&#34;&gt;Build配置&lt;/h2&gt;
&lt;p&gt;之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。
之前我们用到了一个名为&lt;code&gt;.travis.yml&lt;/code&gt;的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。&lt;/p&gt;
&lt;h3 id=&#34;指定环境&#34;&gt;指定环境&lt;/h3&gt;
&lt;p&gt;在文件中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;language: node_js
node_js:
- &#39;0.10&#39; //指定使用node.js最新的稳定版0.10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;指定分支&#34;&gt;指定分支&lt;/h3&gt;
&lt;p&gt;在文件中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;branches:
only:
- blog //这个分支应当使用自己的源文件分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。&lt;/p&gt;
&lt;h3 id=&#34;hexo配置&#34;&gt;Hexo配置&lt;/h3&gt;
&lt;p&gt;首先在虚拟机中安装Hexo：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install:
- npm install hexo-cli -g
- npm install hexo --save
- npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行Hexo的渲染操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script:
- hexo clean //分开写，方便调试可能出现的错误
- hexo d
- hexo g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里，你的Travis CI的持续集成已经配置完毕了，最后的&lt;code&gt;.travis.yml&lt;/code&gt;文件内容可以参考如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;branches:
only:
- blog
language: node_js
sudo: false
node_js:
- &#39;0.12&#39;
before_install:
- openssl aes-256-cbc -K $encrypted_xxxxxxxxx_key -iv $encrypted_xxxxxxx_iv
-in doc/travis.enc -out ~/.ssh/id_rsa -d
- chmod 600 ~/.ssh/id_rsa
- eval $(ssh-agent)
- ssh-add ~/.ssh/id_rsa
- cp doc/ssh_config ~/.ssh/config
- git config --global user.name &amp;quot;yourname&amp;quot;
- git config --global user.email youremail
- git clone -b master git@github.com:yourname/yourrepo.git .deploy_git
install:
- npm install hexo-cli -g
- npm install
- npm install hexo-generator-feed --save
- npm install hexo-generator-sitemap --save
- npm install hexo-deployer-git --save
script:
- hexo clean
- hexo g
- hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年02月07日 首次发布，感谢Tommy351&lt;/li&gt;
&lt;li&gt;2015年02月16日 跟随Hexo版本更新，修改了相关代码。&lt;/li&gt;
&lt;li&gt;2015年03月22日 Hexo3.0稳定版发布，修改相关代码，并修复部分显示问题。&lt;/li&gt;
&lt;li&gt;2015年04月01日 因为自己的.travis.yml有大幅度修改，所以重新添加了相关代码，避免产生困扰。&lt;/li&gt;
&lt;li&gt;2015年10月23日 修复部分错字，更新了.travis.yml&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>VPS搭配Github Webhook实现Hexo自动发布</title><link>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</link><pubDate>Thu, 05 Feb 2015 23:22:30 +0000</pubDate><guid>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</guid><description>&lt;p&gt;自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。&lt;/p&gt;
&lt;h1 id=&#34;配置nginx&#34;&gt;配置Nginx&lt;/h1&gt;
&lt;h2 id=&#34;安装nginx&#34;&gt;安装Nginx&lt;/h2&gt;
&lt;p&gt;使用apt-get程序来安装nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
apt-get update
apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中访问&lt;a href=&#34;http://your-ip-address&#34;&gt;http://your-ip-address&lt;/a&gt; or domain/， 如果看到&lt;code&gt;Welcome to nginx!&lt;/code&gt;字样，说明Nginx已经安装成功了。&lt;/p&gt;
&lt;h2 id=&#34;配置nginx-1&#34;&gt;配置Nginx&lt;/h2&gt;
&lt;p&gt;修改&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;文件，在&lt;code&gt;serve&lt;/code&gt;的框里面的空行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
location /update {
proxy_pass http://127.0.0.1:1111;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样设置之后&lt;code&gt;http://your-ip-address or domain/update&lt;/code&gt;访问就会被重定向到1111端口。&lt;/p&gt;
&lt;h2 id=&#34;重启nginx&#34;&gt;重启Nginx&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;/etc/init.d/nginx restart&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置git&#34;&gt;配置Git&lt;/h1&gt;
&lt;h2 id=&#34;安装git&#34;&gt;安装Git&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;apt-get install git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载自己的代码库&#34;&gt;下载自己的代码库&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;git clone yourgit yourdir&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置python&#34;&gt;配置Python&lt;/h1&gt;
&lt;h2 id=&#34;安装python环境&#34;&gt;安装Python环境&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;apt-get install python-pip&lt;/code&gt;
然后系统会自动完成相关的配置。&lt;/p&gt;
&lt;h2 id=&#34;编辑python文件&#34;&gt;编辑Python文件&lt;/h2&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
cd ~/yourdir
vi hook.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在打开的vim界面中，点击一下&lt;code&gt;i&lt;/code&gt;，进入insert模式，然后粘贴以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python3
#-*- coding:utf-8 -*-
# start a python service and watch the nginx request dog
from http.server import HTTPServer,CGIHTTPRequestHandler
from threading import Thread,RLock
import subprocess
import logging
import sys
import os.path
_PWD=os.path.abspath(os.path.dirname(__file__))
def execute_cmd(args,cwd=None,timeout=30):
if isinstance(args,str): args = [args]
try:
with subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) as proc:
try:
output,unused_err = proc.communicate(timeout=timeout)
except:
proc.kill()
raise
retcode = proc.poll()
if retcode:
raise subprocess.CalledProcessError(retcode, proc.args, output=output)
return output.decode(&#39;utf-8&#39;,&#39;ignore&#39;) if output else &#39;&#39;
except Exception as ex:
logging.error(&#39;EXECUTE_CMD_ERROR: %s&#39;,&#39; &#39;.join(str(x) for x in args))
raise ex
class HttpHandler(CGIHTTPRequestHandler):
_lock = RLock()
_counter = 0
_building = False
def build(self):
with HttpHandler._lock:
if HttpHandler._counter == 0 or HttpHandler._building:
return
HttpHandler._counter = 0
HttpHandler._building = True
logging.info(&amp;quot;BUILDING NOW...&amp;quot;)
try:
resp = execute_cmd(os.path.join(_PWD,&#39;build.sh&#39;),cwd=_PWD,timeout=600)
logging.info(resp)
finally:
HttpHandler._building = False
self.build()
def do_GET(self):
self.do_POST()
def do_POST(self):
self.send_response(200,&#39;OK&#39;)
self.end_headers()
self.wfile.write(b&#39;OK&#39;)
self.wfile.flush()
with HttpHandler._lock:
HttpHandler._counter += 1
Thread(target=self.build).start()
if __name__ == &#39;__main__&#39;:
logging.basicConfig(format=&#39;%(asctime)s %(levelname)s: %(message)s&#39;,level=logging.INFO)
port = int(sys.argv[1]) if len(sys.argv) &amp;gt; 1 else 1111
logging.info(&#39;starting the server at 127.0.0.1:%s&#39;,port)
httpd = HTTPServer((&#39;127.0.0.1&#39;,port),HttpHandler)
httpd.serve_forever()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，输入&lt;code&gt;:wq&lt;/code&gt;退出vi。&lt;/p&gt;
&lt;h1 id=&#34;编辑sh文件&#34;&gt;编辑sh文件&lt;/h1&gt;
&lt;p&gt;切换到yourdir，然后输入：
&lt;code&gt;vi build.sh&lt;/code&gt;
在打开的vi界面中，点击&lt;code&gt;i&lt;/code&gt;进入编辑模式，然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/bin/bash
echo &amp;quot;build at `date`&amp;quot;
. ~/.nvm/nvm.sh
nvm use 0.10.36
cd ~/xuanwo
git pull
hexo clean
hexo d -g
echo &amp;quot;built successfully&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，输入&lt;code&gt;:wq&lt;/code&gt;退出vi。&lt;/p&gt;
&lt;h1 id=&#34;后台运行python脚本进行监视&#34;&gt;后台运行Python脚本进行监视&lt;/h1&gt;
&lt;p&gt;运行：
&lt;code&gt;nohup python3 ~/xuanwo/hook.py &amp;gt;&amp;gt; /tmp/hook.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;
&lt;strong&gt;每次重启VPS后，貌似都需要运行一次&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年2月6日 首次发布&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Hexo常见问题解决方案</title><link>https://xuanwo.io/2014/08/14/hexo-usual-problem/</link><pubDate>Thu, 14 Aug 2014 05:20:00 +0000</pubDate><guid>https://xuanwo.io/2014/08/14/hexo-usual-problem/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;Hexo是一个非常好用的静态博客生成器，但是由于很多方面的原因，导致在使用过程中经常出现错误。这些错误中，有些是因为自己的设置不当，导致程序报错；有些是因为版本更迭，导致原有的设置失效；而有些，则是Hexo程序本身的BUG。
本文旨在尽可能的解决前两类问题，缓解Hexo项目大量重复issues的现象。当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/pulls&#34;&gt;提交PR&lt;/a&gt;，&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/issues&#34;&gt;发布issues&lt;/a&gt;或者在下方评论等形式参与到本文档的编辑中来。
同时，也希望有能力的人可以将本文档翻译成英文，以帮助到更多的人。
浏览时，使用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索关键词或使用目录来定位问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文欢迎转载，但是恳请保留贡献者信息，谢谢。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;常见错误&#34;&gt;常见错误&lt;/h1&gt;
&lt;h2 id=&#34;本地浏览没问题-deploy报错&#34;&gt;本地浏览没问题，Deploy报错&lt;/h2&gt;
&lt;h3 id=&#34;git环境配置错误&#34;&gt;Git环境配置错误&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;*Windows系统*出现报错信息如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[info] Start deploying: git
[info] Setting up Git deployment...
[error] Error: spawn ENOENT
Error: spawn ENOENT
at errnoException (child_process.js:1000:11)
at Process.ChildProcess._handle.onexit (child_process.js:791:34)
events.js:72
throw er; // Unhandled &#39;error&#39; event
^
Error: spawn ENOENT
at errnoException (child_process.js:1000:11)
at Process.ChildProcess._handle.onexit (child_process.js:791:34)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检查Git的相关配置，将git所在目录添加到系统path中去。&lt;/p&gt;
&lt;h3 id=&#34;deploy设置错误&#34;&gt;Deploy设置错误&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;hexo deploy&lt;/code&gt;后，出现错误信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&#39;github&#39; does not appear to be a git repository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查&lt;code&gt;_config.yml&lt;/code&gt;中deploy设置。参见&lt;a href=&#34;http://hexo.io/docs/deployment.html&#34;&gt;http://hexo.io/docs/deployment.html&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;.deploy_git&lt;/code&gt;文件夹并且执行&lt;code&gt;hexo clean&lt;/code&gt;后，重新&lt;code&gt;hexo deploy&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deploy之后-页面长时间404&#34;&gt;Deploy之后，页面长时间404&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-404.png&#34; alt=&#34;Github 404 孩子不哭&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;检查github-pages类型&#34;&gt;检查Github Pages类型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;个人主页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是库的名称为&lt;code&gt;yourname.github.io&lt;/code&gt;的主页，页面文件应当在master分支下，文件结构可以参考&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/tree/master&#34;&gt;我的主页&lt;/a&gt;，也就是应当以HTML文件为主，是没有Markdown文件的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目主页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是库名不是&lt;code&gt;yourname.github.io&lt;/code&gt;的主页，页面文件应当在&lt;code&gt;gh-pages&lt;/code&gt;分支下，文件结构与个人主页基本一致，同样没有Markdown文件。&lt;/p&gt;
&lt;h3 id=&#34;检查github验证邮件&#34;&gt;检查Github验证邮件&lt;/h3&gt;
&lt;p&gt;曾经出现过所有操作都没有问题但就是404的状况，新创建的用户最好都去看看是不是验证邮件没有通过。&lt;/p&gt;
&lt;h3 id=&#34;注意库的名字&#34;&gt;注意库的名字&lt;/h3&gt;
&lt;p&gt;现在大多改成&lt;code&gt;.io&lt;/code&gt;结尾域名了，但是不确定是不是真的跟这个有关，最好改成&lt;code&gt;.io&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;自有域名二级目录无法访问&#34;&gt;自有域名二级目录无法访问&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;
&lt;a href=&#34;https://github.com/hexojs/hexo/issues/820&#34;&gt;参见issue820&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题出在CNAME跳转，下面附上我的分析，如果不感兴趣可以直接翻到解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有CNAME跳转，访问&lt;code&gt;yourname.github.io/repo&lt;/code&gt;会自动地去访问gh-pages分支下的静态文件。
但是一旦进行了CNAME跳转，访问&lt;code&gt;yourname.github.io/repo&lt;/code&gt;就会自动跳转为&lt;code&gt;yoursite.com/repo&lt;/code&gt;，显然在你的博客目录下是没有这个文件夹的，所以自然而然的会出现访问404错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;增加一个新的DNS记录&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;修改自己域名的DNS记录，增加一条记录（A记录或者CNAME都可以，指向github），内容是&lt;code&gt;repo.yoursite.com&lt;/code&gt;，访问时通过&lt;code&gt;repo.yoursite.com&lt;/code&gt;来访问。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;将这个库移动到博客目录下&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;按照上述的分析，把这个库的repo移动至博客目录下即可。注意修改html以免被hexo再次渲染，还有如果是直接复制或者clone，注意删除隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;h2 id=&#34;hexo命令失效&#34;&gt;Hexo命令失效&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入命令后出现如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
localhost:~ apple$ hexo new &amp;quot;title&amp;quot;
Usage: hexo
Commands:
help Get help on a command
init Create a new Hexo folder
migrate Migrate your site from other system to Hexo
version Display version information
Global Options:
--debug Display all verbose messages in the terminal
--safe Disable all plugins and scripts
For more help, you can use hexo help [command] for the detailed information
or you can check the docs: http://zespia.tw/hexo/docs/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查&lt;code&gt;_config.yml&lt;/code&gt;中的内容，特别注意&lt;code&gt;:&lt;/code&gt;后面需要有一个空格。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查`package.json&amp;rsquo;中的内容，注意添加hexo信息用来标识这是一个hexo目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
{
&amp;quot;hexo&amp;quot;: {
&amp;quot;version&amp;quot;: &amp;quot;&amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果还是有问题，可以更新hexo之后，在新的文件夹中重新进行&lt;code&gt;hexo init&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hexo所有命令报错&#34;&gt;Hexo所有命令报错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/832&#34;&gt;参见Issues&lt;/a&gt;
报错信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[error] { name: &#39;HexoError&#39;,
reason: &#39;end of the stream or a document separator is expected&#39;,
mark:
{ name: null,
buffer: &#39;# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site\ntitle: 2hu\nsubtitle:\ndescription: 2hu\nauthor: @2hu10n92hen9\nemail:\nlanguage:\n\n# URL\n## If your site is put in a subdirectory, set url as \&#39;http://yoursite.com/child\&#39; and root as \&#39;/child/\&#39;\nurl: http://2hu.me\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Directory\nsource_dir: source\npublic_dir: public\n\n# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nhighlight:\n enable: true\n line_number: true\n tab_replace:\n\n# Category &amp;amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 2\ncategory: 2\ntag: 2\n\n# Server\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nserver_ip: 0.0.0.0\nlogger: false\nlogger_format:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Disqus\ndisqus_shortname: 2hu\n\n# Extensions\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: strict\nexclude_generator:\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n type: github\n repository: https://github.com/zhulongzheng/zhulongzheng.github.io.git\n branch: master\n\u0000&#39;,
position: 168,
line: 8,
column: 8 },
message: &#39;Config file load failed&#39;,
domain:
{ domain: null,
_events: { error: [Function] },
_maxListeners: 10,
members: [ [Object] ] },
domainThrown: true,
stack: undefined }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;
仔细检查&lt;code&gt;_config.yml&lt;/code&gt;文件中所有冒号后面的空格，格式很严格，必须是&lt;strong&gt;只有一个&lt;/strong&gt;，&lt;strong&gt;半角&lt;/strong&gt;。不管是多了还是少了都会报错，这是yml解释器所定义的语法。如果不确定的话，将输入法调整到英文模式，删除所有冒号后面的空格重新输入，不要使用Tab。&lt;/p&gt;
&lt;h2 id=&#34;更新至2-8-x版本后-构建失败&#34;&gt;更新至2.8.X版本后，构建失败&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
输入&lt;code&gt;hexo g&lt;/code&gt;后，报错如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[error] { name: &#39;HexoError&#39;,
reason: &#39;incomplete explicit mapping pair; a key node is missed&#39;,
mark:
{ name: null,
buffer: &#39;categories: Categories\nsearch: Search\ntags: Tags\ntagcloud: Tag Cloud\ntweets: Tweets\nprev: Prev\nnext:
Next\ncomment: Comments\narchive_a: Archives\narchive_b: Archives: %s\npage: Page %d\nrecent_posts: Recent Posts\ndescr
iption: Description\nread_more: Read More\n\u0000&#39;,
position: 163,
line: 9,
column: 19 },
message: &#39;Process failed: languages/default.yml&#39;,
domain:
{ domain: null,
_events: { error: [Function] },
_maxListeners: 10,
members: [ [Object] ] },
domainThrown: true,
stack: undefined }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主题目录下所有yml文件中所有有空格的字段都用双引号括起来，尤其注意languages下面的yml文件。
&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-languages-error.png&#34; alt=&#34;就像这样&#34; /&gt;
&lt;em&gt;感谢&lt;a href=&#34;https://github.com/dukewan&#34;&gt;@dukewan&lt;/a&gt;提供的截图&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改主题文件之后-网页不更新&#34;&gt;修改主题文件之后，网页不更新&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在修改主题文件之后，页面的文件依然没有更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo clean&lt;/code&gt;并且删除&lt;code&gt;.deploy_git&lt;/code&gt;文件夹之后，&lt;code&gt;hexo d -g&lt;/code&gt;。为了强制浏览器更新资源文件，可以采用&amp;rsquo;Ctrl+F5&amp;rsquo;来刷新。&lt;/p&gt;
&lt;h2 id=&#34;页面没有渲染-partial转义失败&#34;&gt;页面没有渲染（partial转义失败）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/838&#34;&gt;参见Issues&lt;/a&gt;
看不到渲染后的页面，只能看到类似如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;%- partial(&#39;_partial/head&#39;) %&amp;gt;
&amp;lt;%- partial(&#39;_partial/header&#39;, null, {cache: !config.relative_link}) %&amp;gt;
&amp;lt;%- body %&amp;gt;
&amp;lt;% if (theme.sidebar &amp;amp;&amp;amp; theme.sidebar !== &#39;bottom&#39;){ %&amp;gt; &amp;lt;%- partial(&#39;_partial/sidebar&#39;, null, {cache: !config.relative_link}) %&amp;gt; &amp;lt;% } %&amp;gt;
&amp;lt;%- partial(&#39;_partial/footer&#39;, null, {cache: !config.relative_link}) %&amp;gt;
&amp;lt;%- partial(&#39;_partial/mobile-nav&#39;, null, {cache: !config.relative_link}) %&amp;gt; &amp;lt;%- partial(&#39;_partial/after-footer&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在博客所在目录下执行&amp;rsquo;npm install&amp;rsquo;用以安装插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢&lt;a href=&#34;http://zespia.tw/&#34;&gt;@tommy351&lt;/a&gt;提供的解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;更新至3-0-0版本后-文件渲染时卡死&#34;&gt;更新至3.0.0版本后，文件渲染时卡死&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1137&#34;&gt;参见Issues&lt;/a&gt;
表现为文件不多，但是渲染非常缓慢，超过半个小时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题出在&lt;code&gt;Highlight.js&lt;/code&gt;在判断语言类型时，会因为&lt;code&gt;-&lt;/code&gt;这个符号导致卡死。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用代码块时，明确使用类型，或者全部使用&lt;code&gt;plain&lt;/code&gt;类型，如下：&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
plain
something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;h2 id=&#34;升级至hexo-3-0版本后-deploy报错&#34;&gt;升级至Hexo 3.0版本后，deploy报错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1013&#34;&gt;参见Issues&lt;/a&gt;
升级之后，本来可以deploy的设置出现报错，内容为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
ERROR Deployer not found: github
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;问题分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hexo3.0与以往版本最大的改变在于，更多的模块都从主程序中剥离了出来，其中就包括deploy的相关模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先需要安装对应的deploy模块，目前Hexo支持以下服务器的一键部署：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
git
heroku
rsync
openshift
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装命令为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
npm install hexo-deployer-git --save //将git替换为别的名字就可以安装对应模块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后对&lt;code&gt;_config.yml&lt;/code&gt;做如下设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
deploy:
type: git //非git请参考官方文档中的设置
repo: &amp;lt;repository url&amp;gt;
branch: [branch]
message: [message]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mac-os安装hexo出错&#34;&gt;Mac OS安装Hexo出错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1326&#34;&gt;参见Issues&lt;/a&gt;
命令行返回ERROR：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
{ [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用命令&lt;code&gt;npm install hexo --no-optional&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;常见问题&#34;&gt;常见问题&lt;/h1&gt;
&lt;h2 id=&#34;如何在不同电脑-系统-上使用hexo&#34;&gt;如何在不同电脑（系统）上使用Hexo&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;Git&lt;/code&gt;来管理自己的&lt;code&gt;Blog&lt;/code&gt;文件夹，需要注意一下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果主题是通过git管理的，需要将主题文件夹下的&lt;code&gt;.git&lt;/code&gt;文件夹删除或者使用git submodule的形式进行管理，才能同步Blog文件夹。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blog目录下自带的&lt;code&gt;.gitignore&lt;/code&gt;文件，&lt;code&gt;node_modules&lt;/code&gt;文件夹是不会同步的，所以同步之后需要自己再次进行&lt;code&gt;npm install&lt;/code&gt;，但是注意，不要进行&lt;code&gt;hexo init&lt;/code&gt;了，否则&lt;code&gt;_config.yml&lt;/code&gt;会被覆盖。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后看一下同步之后的目录结构：
&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/tree/blog&#34;&gt;https://github.com/Xuanwo/xuanwo.github.io/tree/blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用git-submodule来管理主题&#34;&gt;使用git submodule来管理主题&lt;/h2&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;h2 id=&#34;在主目录下添加-readme-md-文件或者html文件&#34;&gt;在主目录下添加&lt;code&gt;README.md&lt;/code&gt;文件或者html文件&lt;/h2&gt;
&lt;h3 id=&#34;hexo3-0以下使用&#34;&gt;Hexo3.0以下使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;感谢&lt;a href=&#34;http://timnew.me/&#34;&gt;@TimNew&lt;/a&gt;提供的思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如大家所知道的，在source文件夹下的所有md文件都会被hexo渲染成html文件，导致&lt;code&gt;README.md&lt;/code&gt;文件不能好好的放在里面了，即使是添加了&lt;code&gt;layout: false&lt;/code&gt;依然没有用。&lt;/p&gt;
&lt;p&gt;不过现在有一个另外的好办法，那就是利用主题的source目录，也就是&lt;code&gt;themes/themes-name/source&lt;/code&gt;。因为这个文件夹里面的所有文件都会被复制到网站的根目录中去，也就是说，如果在里面放上&lt;code&gt;README&lt;/code&gt;，就可以正常的存在于网站的主目录了。&lt;/p&gt;
&lt;p&gt;同样的，对于一些需要在网站下添加html文件的需求也可以这样来达成。比如百度或者谷歌在验证站长权限的时候，通常都会要求在主目录下添加一个html文件。同样的，只要把这个文件放在&lt;code&gt;themes/themes-name/source&lt;/code&gt;就可以搞定了。&lt;/p&gt;
&lt;h3 id=&#34;hexo3-0以上支持&#34;&gt;Hexo3.0以上支持&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;_config.yml&lt;/code&gt;下的&lt;code&gt;skip_render&lt;/code&gt;参数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip_render&lt;/code&gt;使用了&lt;a href=&#34;https://github.com/isaacs/minimatch&#34;&gt;&lt;code&gt;minimatch&lt;/code&gt;&lt;/a&gt;，开始匹配的位置是基于你的&lt;code&gt;source_dir&lt;/code&gt;的，一般来说，是你的&lt;code&gt;source&lt;/code&gt;文件夹下。下面我分别列举几种常见的情况进行说明：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;请注意yml中的文件格式，输入单个数据请注意空格，输入数组请进行缩进&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单个文件夹下全部文件：&lt;code&gt;skip_render: test/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单个文件夹下指定类型文件：&lt;code&gt;skip_render: test/*.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单个文件夹下全部文件以及子目录:&lt;code&gt;skip_render: test/**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个文件夹以及各种复杂情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
skip_render:
- `test1/*.html`
- `test2/**`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hexo版本回退&#34;&gt;Hexo版本回退&lt;/h2&gt;
&lt;p&gt;有时候更新之后发现新版本的Hexo不能按照预期的方式工作，这时候就需要使用版本回退功能。
打开命令行，输入&lt;code&gt;npm install -g hexo@版本号&lt;/code&gt;就可以回退到没有出现问题的版本上来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这个命令适用于所有Node.js模块&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;少数情况下会出现Node.js版本问题，可以使用&lt;code&gt;nvm install 版本号&lt;/code&gt;来安装报错信息中需要的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;推荐使用nvm来管理Node.js版本&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何为站点添加社会化评论&#34;&gt;如何为站点添加社会化评论&lt;/h2&gt;
&lt;h3 id=&#34;使用disque&#34;&gt;使用Disque&lt;/h3&gt;
&lt;p&gt;Hexo默认支持Disque，打开&lt;code&gt;_config.yml&lt;/code&gt;，在&lt;code&gt;disqus_shortname:&lt;/code&gt;后面输入自己的Disque账号。保存，重新渲染，清除缓存之后就能看到自己的评论窗口。&lt;/p&gt;
&lt;h3 id=&#34;使用duoshuo&#34;&gt;使用Duoshuo&lt;/h3&gt;
&lt;p&gt;部分主题添加了对多说的支持，只要输入Duoshuo账号，就可以看到效果了。如果主题不支持的话，就需要自己添加。需要对自己的主题结构有一定的了解，不是每一个主题都会有一样的文件，找不到同样的文件也正常，但是都会存在相同功能的区块，自己去定位即可。如果没把握的话，最后做好备份。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;after_footer.ejs&lt;/code&gt;模块中输入如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
var duoshuoQuery = {short_name:&amp;quot;yourshortname&amp;quot;};
(function() {
var ds = document.createElement(&#39;script&#39;);
ds.type = &#39;text/javascript&#39;;ds.async = true;
ds.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) + &#39;//static.duoshuo.com/embed.js&#39;;
ds.charset = &#39;UTF-8&#39;;
(document.getElementsByTagName(&#39;head&#39;)[0]
|| document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
})();
&amp;lt;/script&amp;gt;
&amp;lt;!-- 多说公共JS代码 end --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;article.ejs&lt;/code&gt;模块中输入如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;% if (page.comments){ %&amp;gt;
&amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;&amp;lt;%- page.path %&amp;gt;&amp;quot; data-title=&amp;lt;%- page.title %&amp;gt; data-url=&amp;lt;%- page.permalink %&amp;gt;&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;如何避免在deploy时输入密码&#34;&gt;如何避免在Deploy时输入密码&lt;/h2&gt;
&lt;h3 id=&#34;使用github客户端&#34;&gt;使用Github客户端&lt;/h3&gt;
&lt;p&gt;安装好Github客户端之后，使用Github客户端内置的Git Shell进行hexo的部署操作。&lt;/p&gt;
&lt;h3 id=&#34;自行生成ssh-key&#34;&gt;自行生成SSH key&lt;/h3&gt;
&lt;p&gt;使用Github客户端可以免去输入密码操作的原因就是客户端在本地生成了一个SSH key并且添加到了Github网站中。不喜欢使用Github客户端的童鞋可以参考下面的流程自行生成SSH key。
&lt;a href=&#34;http://xuanwo.io/2015/02/07/generate-a-ssh-key/&#34;&gt;使用Github SSH Key以免去Hexo部署时输入密码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;多git部署&#34;&gt;多git部署&lt;/h2&gt;
&lt;p&gt;参考&lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;hexo-deployer-git&lt;/a&gt;插件README进行配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
deploy:
type: git
message: [message]
repo:
github: &amp;lt;repository url&amp;gt;,[branch]
gitcafe: &amp;lt;repository url&amp;gt;,[branch]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意每一个冒号后面的空格，如果丢失会导致yml文件读取错误。&lt;/p&gt;
&lt;h2 id=&#34;开启全站https&#34;&gt;开启全站https&lt;/h2&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;h1 id=&#34;贡献者&#34;&gt;贡献者&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xuanwo.io/&#34;&gt;@Xuanwo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://timnew.me/&#34;&gt;@TimNew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zespia.tw/&#34;&gt;@tommy351&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2014年08月14日 完成大体框架，内容慢慢填充&lt;/li&gt;
&lt;li&gt;2014年08月23日 补充404问题，以及如何在不同电脑（系统）上使用Hexo&lt;/li&gt;
&lt;li&gt;2014年09月06日 新增自有域名二级目录无法访问，在主目录下添加md文件&lt;/li&gt;
&lt;li&gt;2014年09月09日 新增Hexo版本回退，Hexo所有命令报错。&lt;/li&gt;
&lt;li&gt;2014年09月23日 新增Partial没有转义&lt;/li&gt;
&lt;li&gt;2014年09月24日 新增添加社会化评论&lt;/li&gt;
&lt;li&gt;2015年02月06日 新增本地添加SSH key，修复部分笔误&lt;/li&gt;
&lt;li&gt;2015年02月07日 SSH key生成独立成篇&lt;/li&gt;
&lt;li&gt;2015年04月01日 添加了部分Hexo3.0带来的问题，新增了&lt;code&gt;skip_render&lt;/code&gt;参数设置&lt;/li&gt;
&lt;li&gt;2015年04月03日 添加了Hexo3.0中deploy设置&lt;/li&gt;
&lt;li&gt;2015年08月09日 添加了多git部署，Mac OS安装出错，更新了&lt;code&gt;skip_render&lt;/code&gt;参数设置以及部分文本说明&lt;/li&gt;
&lt;li&gt;2015年09月05日 添加了开启全站https以及主题管理，修复了代码显示BUG，删除了部分口水话&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Hexo构建项目Wiki</title><link>https://xuanwo.io/2014/07/07/use-hexo-to-bulid-project-wiki/</link><pubDate>Mon, 07 Jul 2014 00:38:09 +0000</pubDate><guid>https://xuanwo.io/2014/07/07/use-hexo-to-bulid-project-wiki/</guid><description>&lt;p&gt;七七事件前一天，我有幸加入了&lt;a href=&#34;https://github.com/cugbacm/oj&#34;&gt;本校OJ2.0&lt;/a&gt;项目组。非常高兴能够为我们学校自己的OJ开源项目做出一份贡献，虽然只是一份整理Wiki的小活儿，但是这是我第一次真正的参与一个源项目。经过谨慎考虑之后，我决定项目的Wiki使用Github Pages来构建。&lt;/p&gt;
&lt;h1 id=&#34;为什么是github-pages&#34;&gt;为什么是Github Pages？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;免费，无限流量&lt;/li&gt;
&lt;li&gt;享受git的版本管理功能，不用担心文章遗失。&lt;/li&gt;
&lt;li&gt;你只要用自己喜欢的编辑器写文章就可以了，其他事情一概不用操心，都由github处理。
&lt;em&gt;以上引用自&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&#34;&gt;阮一峰先生的相关博文&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;同Github Wiki一样支持多人协作，但是更加便于查阅，特别是在涉及主题繁杂的时候。&lt;/li&gt;
&lt;li&gt;比Github Wiki拥有更大的控制权限，避免Wiki被错误操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;前期准备&#34;&gt;前期准备&lt;/h1&gt;
&lt;h2 id=&#34;hexo的安装与配置&#34;&gt;Hexo的安装与配置&lt;/h2&gt;
&lt;h3 id=&#34;windows环境下&#34;&gt;Windows环境下&lt;/h3&gt;
&lt;p&gt;32位地址:&lt;a href=&#34;http://nodejs.org/dist/v0.10.29/node-v0.10.29-x86.msi&#34;&gt;http://nodejs.org/dist/v0.10.29/node-v0.10.29-x86.msi&lt;/a&gt;
64位地址:&lt;a href=&#34;http://nodejs.org/dist/v0.10.29/x64/node-v0.10.29-x64.msi&#34;&gt;http://nodejs.org/dist/v0.10.29/x64/node-v0.10.29-x64.msi&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mac-os环境下&#34;&gt;Mac OS环境下&lt;/h3&gt;
&lt;p&gt;安装包地址:&lt;a href=&#34;http://nodejs.org/dist/v0.10.29/node-v0.10.29.pkg&#34;&gt;http://nodejs.org/dist/v0.10.29/node-v0.10.29.pkg&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux环境下&#34;&gt;Linux环境下&lt;/h3&gt;
&lt;p&gt;建议使用&lt;code&gt;nvm&lt;/code&gt;来管理nodejs环境
1. 打开终端，输入&lt;code&gt;wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh&lt;/code&gt;
2. 重启终端之后,输入&lt;code&gt;nvm ls&lt;/code&gt;，则会列出所有的可用版本
3. 输入&lt;code&gt;nvm install 0.10.29&lt;/code&gt;（此处以最新版为例）
4. 下面配置nodejs的环境，分别输入&lt;code&gt;nvm use 0.10.29&lt;/code&gt;以及&lt;code&gt;nvm alias default 0.10.29&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;git的安装与配置&#34;&gt;Git的安装与配置&lt;/h2&gt;
&lt;h3 id=&#34;windows环境下-1&#34;&gt;Windows环境下&lt;/h3&gt;
&lt;p&gt;不妨使用Github For Windows， 通过添加命令行参数启动环境，无须配置PATH，完全绿色化。（TODO：有待补充）&lt;/p&gt;
&lt;h3 id=&#34;mac-os环境下-1&#34;&gt;Mac OS环境下&lt;/h3&gt;
&lt;p&gt;同理，使用Github For Mac即可。&lt;/p&gt;
&lt;h3 id=&#34;linux环境下-1&#34;&gt;Linux环境下&lt;/h3&gt;
&lt;p&gt;Ubuntu, Debian：&lt;code&gt;sudo apt-get install git-core&lt;/code&gt;
Fedora, Red Hat, CentOS：&lt;code&gt;sudo yum install git-core&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;开启ssh-避免重复输入帐号密码&#34;&gt;开启SSH，避免重复输入帐号密码&lt;/h3&gt;
&lt;p&gt;可以参考&lt;a href=&#34;http://xuanwo.io/2015/02/07/generate-a-ssh-key/&#34;&gt;此处&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;wiki配置&#34;&gt;Wiki配置&lt;/h1&gt;
&lt;p&gt;感谢&lt;a href=&#34;http://www.hahack.com/&#34;&gt;wzpan&lt;/a&gt;开源的主题，其实还是我主动索要的- -，幸好他非常热情地提供了帮助，在此表示衷心的感谢。
致谢完毕，下面转入配置的细节。
1. 在github上建立一个新的仓库，名为&lt;code&gt;yourname.github.io&lt;/code&gt;
2. 事先建立好准备存放wiki的文件夹，然后在当前目录下打开终端（或者不停地cd进入），然后输入&lt;code&gt;hexo init&lt;/code&gt;，初始化。
3. 然后输入&lt;code&gt;npm install&lt;/code&gt;，自动下载相关的依赖包，此时一个最基本的框架已经构建完毕了。
4. 然后输入&lt;code&gt;git clone https://github.com/wzpan/hexo-theme-wixo.git themes/wixo&lt;/code&gt;，下载wiki用的主题。
5. 然后修改&lt;code&gt;_config.yml&lt;/code&gt;中的&lt;code&gt;theme&lt;/code&gt;条目为&lt;code&gt;wixo&lt;/code&gt;，注意&lt;code&gt;theme&lt;/code&gt;后有一个空格。
&amp;gt;
补充一下关于&lt;code&gt;deploy&lt;/code&gt;的设置
同样是在_config.yml文件夹中，修改&lt;code&gt;deploy&lt;/code&gt;的部分为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
type: github
repo: repository url //使用之前创建的那个库，建议使用SSH
branch: branch //Hexo会自动识别个人wiki还是项目wiki
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;p&gt;6. 进入source文件夹，打开_post文件夹，新建一个md文档，在文档的开头加入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: your title //这将会是wiki文档的标题
date: 2014-03-16 10:17:16 //构建时间，wiki中用不到
categories: Docs //这将会是本文档所属的类别
toc: true //默认开启，生成table of contents
--- //不可省略，敲回车后，下面的内容就自由发挥了～
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;p&gt;7. 保存文档后，返回wiki所在文件夹， 输入&lt;code&gt;hexo d -g&lt;/code&gt;，此时wiki已经自动生成并上传完毕了。&lt;/p&gt;
&lt;h1 id=&#34;协作注意事项&#34;&gt;协作注意事项&lt;/h1&gt;
&lt;h2 id=&#34;项目创建者&#34;&gt;项目创建者&lt;/h2&gt;
&lt;p&gt;按照上述设置，&lt;code&gt;wiki&lt;/code&gt;默认保存在&lt;code&gt;yourname.github.io&lt;/code&gt;的&lt;code&gt;master&lt;/code&gt;分支下。建议另外开启一个&lt;code&gt;source&lt;/code&gt;分支，用来将整个wiki文件夹上传，方便多地编辑以及同步协作。
&amp;gt;
一开始可能会发现wiki文件夹不能使用git管理，这是因为主题wixo是使用git管理的。所以在上传wiki文件夹之前，要删除位于wixo文件夹下的.git文件夹。&lt;/p&gt;
&lt;h2 id=&#34;项目参与者&#34;&gt;项目参与者&lt;/h2&gt;
&lt;p&gt;让项目创建者在项目的settings中的Collaborators栏目中输入自己的用户名，即可获得对这个项目的控制权。
环境配置完毕后，fork&lt;code&gt;source&lt;/code&gt;分支，即可开始编辑工作。根据&lt;code&gt;.gitignore&lt;/code&gt;文件的不同，可能还需要进行&lt;code&gt;npm install&lt;/code&gt;以解决依赖问题。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2014年07月07日 完成&lt;code&gt;前言&lt;/code&gt;和&lt;code&gt;为什么&lt;/code&gt;板块&lt;/li&gt;
&lt;li&gt;2014年07月24日 完成&lt;code&gt;前期准备&lt;/code&gt;和&lt;code&gt;Wiki配置&lt;/code&gt;以及&lt;code&gt;注意事项&lt;/code&gt;版块，接下来完成免PATH配置的详细步骤以及SSH的配置。此外发现步骤有些混杂不清，下一个版本中将进行修正。&lt;/li&gt;
&lt;li&gt;2015年04月01日 添加了SSH配置。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Github Pages做博客的新思路——Spring</title><link>https://xuanwo.io/2014/06/11/new-way-blog-spring/</link><pubDate>Wed, 11 Jun 2014 14:00:00 +0000</pubDate><guid>https://xuanwo.io/2014/06/11/new-way-blog-spring/</guid><description>&lt;p&gt;很久之前就有了想要有一个自己的博客的想法，一直没有付诸于实施。整个初中到高中基本上就是在使用一个半死不活的CSDN博客，更新不多，质量不高，还有点嫌弃它丑陋，定制性不佳的界面。
前两天队长要求我们每个人都必须开通一个博客，于是，我终于开始腾出精力和时间去寻找一个合适的地方来做我的博客。现有的一些博客提供商都被否决了，网易搜狐腾讯之类的并不是适合一个程序猿，文章写出来也得不到反馈与交流，失去了它的意义。随着搜索的进行，Github Pages开始频繁的出现在页面上。之前一直在用Github，但是对它的Pages业务并不了解。根据一些教程（感谢&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&#34;&gt;阮一峰先生的博客&lt;/a&gt;），我先后使用了&lt;code&gt;Hexo&lt;/code&gt;，&lt;code&gt;Jekyll&lt;/code&gt;，&lt;code&gt;Octopress&lt;/code&gt;等生成网站。网站的风格我很喜欢，只是不停地纠结于怎样的配置更好的问题，反而加重了我自己的负担。
无意之间，我看到了@zhaoda的博客，使用自己开发的&lt;code&gt;Spring&lt;/code&gt;项目，通过抓取项目的&lt;code&gt;issues&lt;/code&gt;来撰写博客，效果出奇的好。使用Github自带的&lt;code&gt;lables&lt;/code&gt;进行标签管理，&lt;code&gt;issues&lt;/code&gt;的评论功能直接可以当做文章的评论区，操作简单，无需复杂配置，完全符合我的要求。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;作者本人的介绍&#34;&gt;作者本人的介绍&lt;/h1&gt;
&lt;p&gt;Spring是一个通过GitHub Issues撰写内容的博客引擎，或者说是一个简单、静态化的建站系统。不需要服务器和数据库支持，你可以把它作为一个GitHub代码仓库，并托管在免费的GitHub Pages上运行，然后在这个仓库的Issues系统里撰写日志。
你可以在这个仓库的Issues系统里添加labels标签，这些标签会成为博客的分类，然后新建Issues，并用Markdown语法写日志。
Spring拥有响应式的页面设计，可以在手机、平板和桌面端完美展现；支持IE10+和所有现代浏览器，底端设备做了跳转的降级处理。
你可以快速的安装并运行这个系统。&lt;/p&gt;
&lt;h1 id=&#34;构建步骤&#34;&gt;构建步骤&lt;/h1&gt;
&lt;p&gt;接下来，我简单介绍一下如何应用Spring来构建自己的博客。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork仓库&lt;a href=&#34;https://github.com/zhaoda/spring&#34;&gt;Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改仓库名称为&lt;code&gt;yourname.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;index.html&lt;/code&gt;文件（可以在Github网页端修改好之后再同步到本地）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.extend(spring.config, {
// my blog title
---
title: &#39;Your Blog title&#39;,
// my blog description
desc: &amp;quot;A blog engine written by github issues [Fork me on GitHub](https://github.com/zhaoda/spring)&amp;quot;,
// my github username
owner: &#39;Your Github username&#39;,
// creator&#39;s username
creator: &#39;Your Github username&#39;,
// the repository name on github for writting issues
repo: &#39;yourname.github.io&#39;,
// custom page
pages: [
]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在设置页面中打开&lt;code&gt;Issues&lt;/code&gt;功能，开始写你的博客吧～&lt;/p&gt;
&lt;h1 id=&#34;添加百度统计代码&#34;&gt;添加百度统计代码&lt;/h1&gt;
&lt;p&gt;复制百度提供的代码，粘贴到&lt;code&gt;index.html&lt;/code&gt;中&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;与&lt;code&gt;&amp;lt;\body&amp;gt;&lt;/code&gt;之间即可。
添加完毕后，可以在百度统计中选择&lt;code&gt;检测代码&lt;/code&gt;来测试自己的代码是否安装成功。
其他统计代码也是一样。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2014年06月11日 完成初稿&lt;/li&gt;
&lt;li&gt;2014年06月12日 完成添加百度统计代码教程&lt;/li&gt;
&lt;li&gt;2014年07月03日 整体博客迁移至Hexo，此文不再更新&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>