<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Xuanwo&#39;s Blog</title><link>https://xuanwo.io/tags/c/</link><description>Recent content in C on Xuanwo&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 09 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://xuanwo.io/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>基于MSP430G2553的打铃系统开发手记</title><link>https://xuanwo.io/2016/05/09/msp430g2553-bellring/</link><pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate><guid>https://xuanwo.io/2016/05/09/msp430g2553-bellring/</guid><description>&lt;p&gt;我萌萌哒的妹纸是一个代码苦手，完全无法理解 C 语言，所以每一次到单片机上机需要交作业的时候都是愁眉苦脸的样子。而我又总是因为自己确实不懂单片机里面的种种奇怪定义（中断，串口，P1.x 之类），所以也一直没有什么好办法去帮她。这一次的作业对编码能力要求较高，但是涉及到的硬件比较少，于是决定以此为契机，开始我的嵌入式开发之旅。&lt;/p&gt;
&lt;h1 id=&#34;需求&#34;&gt;需求&lt;/h1&gt;
&lt;p&gt;这次的如下：&lt;/p&gt;
&lt;h2 id=&#34;基本要求&#34;&gt;基本要求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本计时和显示功能(用 12 小时制显示)。
包括上下午标志,时、分的数字显示,秒信号指示。&lt;/li&gt;
&lt;li&gt;能设置当前时间(含上、下午,时,分)&lt;/li&gt;
&lt;li&gt;能实现基本打铃功能,规定:
上午 6:00 起床铃;打铃 5 秒、停 2 秒、再打铃 5 秒。
下午 10:30 熄灯铃;打铃 5 秒、停 2 秒、再打铃 5 秒。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;铃声可用 LED 灯光显示,如果实验装置没有 LED 发光管,可以用七段显示管的小数点显示,也可以用显示小时的十位数码管的多余段显示。凡是用到铃声功能的均可如此处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;发挥部分&#34;&gt;发挥部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增加整点报时功能,整点时响铃 5 秒,要求有控制启动和关闭功能。&lt;/li&gt;
&lt;li&gt;增加调整起床铃、熄灯铃时间的功能。&lt;/li&gt;
&lt;li&gt;增加调整打铃时间长短和间歇时间长短的功能。&lt;/li&gt;
&lt;li&gt;增设上午 4 节课的上、下课打铃功能,规定:
7:30 上课,8:20 下课;8:30 上课,9:20 下课;9:40 上课,10:30 下课;10:40 上课,11:30 下课;每次铃声 5 秒。&lt;/li&gt;
&lt;li&gt;利用板上按键做一个 12 小时/24 小时的显示格式切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;既然我都出动了，肯定不能满足于只完成基本要求，决定把所有功能全都完整的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的来说，整体需求可以分为三个部分：显示，打铃，修改。&lt;/p&gt;
&lt;p&gt;需要用到的东西有：串口，指示灯和一个按键。&lt;/p&gt;
&lt;h2 id=&#34;显示&#34;&gt;显示&lt;/h2&gt;
&lt;p&gt;遵循简单的前后端分离的思想，我们可以使用三个全局变量 hour ， minute ， second 来存储当前的时间，只需要在显示的时候区分上下午和 12 小时／ 24 小时即可。这两个部分解耦之后会发现，我们后面的利用板上按键修改显示格式也变得容易了很多。
通过串口显示也就是需要向指定变量发送字符，将这个功能抽象并封装之后，对于我后续的编程来说，也就是调用一下 Send_Str(str) 的过程。&lt;/p&gt;
&lt;h2 id=&#34;打铃&#34;&gt;打铃&lt;/h2&gt;
&lt;p&gt;打铃是这套系统的重头戏，因为学校方面的资源限制，所以使用指示灯示意的方法来代替打铃。
指示灯的亮灭是通过控制一个变量的值来确定的，于是我只要在正确时候设置正确的值，打铃系统就能按照我期望的方式工作。&lt;/p&gt;
&lt;h2 id=&#34;修改&#34;&gt;修改&lt;/h2&gt;
&lt;p&gt;修改同样是通过串口进行的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在最开始的设计文档中，本来是要求使用4个按键来进行设计，也就是说跟一个普通的电子表差不多。但是非常因缺思艇的事情是学校的按键不够了，所以老师要求所有功能都用串口实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跟显示有些不同的地方是，通过串口向芯片发送数据需要正确使用串口中断。&lt;/p&gt;
&lt;p&gt;综上，这个系统所需要的全部内容就已经实现了。可以看到我做了很多将对硬件的操作抽象化的处理，其实这一点非常重要。因为对于我来说，嵌入式开发最大的难题在于，我不知道里面种种变量的含义，不知道如何操作具体的硬件。将硬件操作抽象化处理之后，我就可以很方便地开展我的后续开发。&lt;/p&gt;
&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;
&lt;p&gt;实现就不再赘述了，想必读者一定都比我强，下面聊一聊遇到的问题以及 debug 的经历。&lt;/p&gt;
&lt;h2 id=&#34;串口配置&#34;&gt;串口配置&lt;/h2&gt;
&lt;p&gt;串口的收和发其实是分开的，这里用到了两个变量： UCA0TXBUF ， UCA0RXBUF 。从字面意思上可以看出，前一个用于发送，后一个用于接收（相对于开发者来说）。发送和接收其实就是给这两个值赋值的过程，看起来这两个变量在接受到值之后会将这个值传给别的变量，所以只要不断的将值赋给它就行，我们写了这样的函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;#pragma vector=USCIAB0RX_VECTOR &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;//中断服务函数
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;
__interrupt &lt;span style=&#34;color:#902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;uart&lt;/span&gt;() {
rec &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; UCA0RXBUF;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;//读取到缓冲区
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt; strtmp[strlen&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rec;
strtmp[strlen] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;//切换模式
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt; mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; strtmp[&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;];
}
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;//发送字符
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;Send_Char&lt;/span&gt;(&lt;span style=&#34;color:#902000&#34;&gt;char&lt;/span&gt; ch) {
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;(IFG2 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; UCA0TXIFG));
UCA0TXBUF &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ch;
}
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;//发送字符串
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;Send_Str&lt;/span&gt;(&lt;span style=&#34;color:#902000&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;p) {
&lt;span style=&#34;color:#902000&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#902000&#34;&gt;char&lt;/span&gt; i;
i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(p &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;) {
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;(IFG2 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; UCA0TXIFG));
UCA0TXBUF &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(p &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; i);
i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;
}
Send_Char(&lt;span style=&#34;color:#40a070&#34;&gt;0x0d&lt;/span&gt;);
Send_Char(&lt;span style=&#34;color:#40a070&#34;&gt;0x0a&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;uart 貌似是一个内置的中断函数，用来处理串口的接收，只要将变量 UCA0RXBUF 的值存储起来即可；后面的 Send_Str 就非常好理解了，将值发送给 UCA0TXBUF ，从而实现串口的输出。&lt;/p&gt;
&lt;p&gt;思路如此清晰，但是测试的时候却遇到了问题，我们的输出是空的，转为16进制显示后，全都是0x00。这个问题调试了很久，拿着原来的代码逐行比对之后发现，出了这样的问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; UCA0BR0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;130&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; UCA0BR1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;6&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; UCA0BR0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;104&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; UCA0BR1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Google 一下才明白，原来 UCA0BR0 和 UCA0BR1 是由系统的时钟速度和波特率决定的值，如果设置错误就会导致串口发送失败。具体的值可以参考&lt;a href=&#34;http://www.ti.com/lit/ug/slau144j/slau144j.pdf&#34;&gt;用户手册&lt;/a&gt;， Ctrl＋F 搜索 &lt;code&gt;Table 15-4. Commonly Used Baud Rates&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id=&#34;串口输出异常&#34;&gt;串口输出异常&lt;/h2&gt;
&lt;p&gt;前面提到我们直接使用三个变量保存当前时间，在输出时做进一步处理，转为字符串的过程中，我们进行了这样的操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;Time[&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hour &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但有趣的事情是，在初始化之后，我们得到的输出是这样的： &lt;code&gt;0/:0/:0/&lt;/code&gt; 。随手输出了一下 &lt;code&gt;/&lt;/code&gt; 的 ASCII 码，发现它刚好比 &lt;code&gt;0&lt;/code&gt; 小一。&lt;/p&gt;
&lt;p&gt;难道说，存储器中的默认值不是 0 吗？ Google 一下之后发现，还真的不是 0 。 MSP430G2553 中的 Flash 存储器在默认状态下的值全为 1 ，然后写入时只能将 1 置为 0 ，所以每一次写入数据都需要先清空再写入。那么问题来了，为什么全为 1 会导致最后输出的结果小 1 呢？我来简单的阐述一下我的理解：&lt;/p&gt;
&lt;p&gt;假设这个存储器只有 8 位，也就是说，现在的值为 &lt;code&gt;11111111&lt;/code&gt; ，然后我加上一个 &lt;code&gt;1&lt;/code&gt; ，于是我们得到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 11111111
+ 1
100000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，我们最后的结果已经移除了，此时会产生截断，也就是说，存储器现在的数据变成了 &lt;code&gt;00000000&lt;/code&gt; ，也就是 &lt;code&gt;0&lt;/code&gt;，跟我们期望的结果 &lt;code&gt;1&lt;/code&gt; 刚好相差一。&lt;/p&gt;
&lt;p&gt;当然，实际的情况要比我上面的举例要复杂的多，不过我想已经足够我们认识到这个 BUG 的本质，就不再多说啦。&lt;/p&gt;
&lt;h2 id=&#34;flash-存储器未清空&#34;&gt;Flash 存储器未清空&lt;/h2&gt;
&lt;p&gt;在测试中，我们发现每一次烧录程序之后， Flash 存储器不会清空，依然会从上一次我们保存的时间开始计时。我觉得这是正确的行为，没有在意，但是我妹纸和她的队友告诉我她们在完成上一个作业的时候每次都是会清空的。我对着这次和上次的代码研究了很久，认为代码里面根本就没有清空 Flash 存储器的操作，如果有的话，掉电保存这项功能根本无从谈起。我妹纸她们也同意我的分析，但是她们的实践确实证明了每次都会清空 Flash 存储区。&lt;/p&gt;
&lt;p&gt;这个问题也困扰了很久，直到第二天，用别人的电脑重新烧录了一遍程序，发现他们的是会正常清空的。所以说，问题在于 CCS 的版本：我妹纸使用的 CCS 版本是 6.1 ，而
他们用的版本是 5.1.1 ，也就是说，不同版本的 CCS 在烧录程序期间的不同行为导致了这次错误。我们换用了 5.1.1 之后，成功解决了这个问题。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;对嵌入式开发有了初步的了解，向着真·全栈开发工程师又近了一步。&lt;/p&gt;
&lt;p&gt;这一次的开发经历遇到了很多因缺思艇的问题，因为嵌入式开发本身比较偏向底层，这次开发甚至还遇到了存储器的存储原理。也有一点将自己看的 CSAPP 融会贯通的感觉，还是很有意思的。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2016年05月09日 首次发布&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>动态规划——最长上升子序列问题</title><link>https://xuanwo.io/2015/07/31/dp-lis/</link><pubDate>Fri, 31 Jul 2015 15:58:35 +0000</pubDate><guid>https://xuanwo.io/2015/07/31/dp-lis/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;最长上升子序列问题，也就是&lt;code&gt;Longest increasing subsequence&lt;/code&gt;，缩写为&lt;code&gt;LIS&lt;/code&gt;。是指在一个序列中求长度最长的一个上升子序列的问题，是动态规划中一个相当经典问题。在这里我们可以看到，这个上升实质上就是一个对&lt;code&gt;&amp;lt;&lt;/code&gt;进行定义的过程，所以我们求解的其实是一类问题，也就是在给定序列中求解长度最长的符合某一性质的子序列的问题。在下面总结的过程中，我还是以递增为例进行阐述。&lt;/p&gt;
&lt;h1 id=&#34;o-n-2-的动态规划方法&#34;&gt;O(n^2)的动态规划方法&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt;表示以i结尾的子序列中LIS的长度。然后我用&lt;code&gt;dp[j](0&amp;lt;=j&amp;lt;i)&lt;/code&gt;来表示在i之前的LIS的长度。然后我们可以看到，只有当&lt;code&gt;a[i]&amp;gt;a[j]&lt;/code&gt;的时候，我们需要进行判断，是否将a[i]加入到dp[j]当中。为了保证我们每次加入都是得到一个最优的LIS，有两点需要注意：第一，每一次，a[i]都应当加入最大的那个dp[j]，保证局部性质最优，也就是我们需要找到&lt;code&gt;max(dp[j](0&amp;lt;=j&amp;lt;i))&lt;/code&gt;；第二，每一次加入之后，我们都应当更新dp[j]的值，显然，&lt;code&gt;dp[i]=dp[j]+1&lt;/code&gt;。
如果写成递推公式，我们可以得到&lt;code&gt;dp[i]=max(dp[j](0&amp;lt;=j&amp;lt;i))+(a[i]&amp;gt;a[j]?1:0)&lt;/code&gt;。
于是我们就能够得到O(n^2)的动态规划方法的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; MAXN &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1010&lt;/span&gt;;
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; n;
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; a[MAXN];
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; dp[MAXN];
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;lis&lt;/span&gt;()
{
memset(dp, &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(dp));
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; Max;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)
{
Max &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; i; &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;j)
{
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; a[j])
{
Max &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; max(Max, dp[j]);
}
}
dp[i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Max &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;;
}
Max &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)
{
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; (dp[i] &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; Max) Max &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; dp[i];
}
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; Max;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;o-nlogn-的动态规划-二分方法&#34;&gt;O(nlogn)的动态规划+二分方法&lt;/h1&gt;
&lt;p&gt;在前一种方法中，我们花费了很多时间在寻找最大的dp[j]上。如果有办法让这个dp[j]变成一个递增的序列，我们就能使用二分来进行优化，从而使得复杂度下降为&lt;code&gt;O(nlogn)&lt;/code&gt;了。
幸运的是，这种方法确实是存在的。我们可以使用dp[i]来保存在前i个数中最大的那个数，很容易可以理解，这个dp[i]已经是单调不减的。接下来的处理其实有些贪心的思想，对于每一个a[i]，我们都在dp数组中寻找比它大的第一个数的下标，不妨设为pos，然后用a[i]来更新dp[pos]。于是我们可以明白，len就应当是&lt;code&gt;max(len, pos+1)&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里我们使用&lt;a href=&#34;http://www.cplusplus.com/reference/algorithm/lower_bound/?kw=lower_bound&#34;&gt;lower_bound函数&lt;/a&gt;，这个函数将会返回小于等于val的第一个值的指针，如果不存在就返回end指针。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; MAXN &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1010&lt;/span&gt;;
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; n;
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; a[MAXN];
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; dp[MAXN];
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;lis&lt;/span&gt;()
{
memset(dp, &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;n);
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;;
dp[&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)
{
&lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; pos &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lower_bound(dp, dp &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; len, a[i]) &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; dp;
dp[pos] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; a[i];
len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; max(len, pos &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;);
}
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; len;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年07月31日 初步总结&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>超星学术视频下载处理一条龙</title><link>https://xuanwo.io/2015/01/07/chaoxing-download/</link><pubDate>Wed, 07 Jan 2015 01:12:07 +0000</pubDate><guid>https://xuanwo.io/2015/01/07/chaoxing-download/</guid><description>&lt;p&gt;我妹纸最近开始通过看超星学术视频来&lt;del&gt;复习&lt;/del&gt;预习课程了，所以我必须搞到对应课程的所有视频（不管是收费还是免费），而且我妹纸还是一个有强迫症的萌妹纸，所有的视频都必须按照顺序拍的好好的，要不然她就会不舒服。
根据以上描述，我需要解决以下需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;破解超星学术视频的加密链接，找到真实的下载链接。&lt;/li&gt;
&lt;li&gt;重命名下载下来的视频文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还是跟以往一样，直接把最终的解决方案放出来，要是对具体的实现感兴趣的可以接着往下面看。&lt;/p&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://disk.xuanwo.io/public.php?service=files&amp;amp;t=e0a53590668ea7605f87a056ea3db288&#34;&gt;超星学术视频下载处理一条龙&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;破解加密链接&#34;&gt;破解加密链接&lt;/h1&gt;
&lt;p&gt;用到了在某宝上面购买的超星学术视频解析下载工具。
双击打开，粘贴上视频页的地址，然后点一下解析，就会这样：
&lt;img src=&#34;https://xuanwo.io/imgs/work/chaoxing-intro.png&#34; alt=&#34;解析示意&#34; /&gt;
然后右击选择保存视频列表，就会自动在当前目录下生成一个用课程名字命名的txt文件，一般内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;视频名称：透过性别看爱情
作者：沈奕斐
出处：复旦大学
透过性别看爱情（一） http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a888dc9b2f5485762f7
透过性别看爱情（二） http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88c47ff350721a07be
透过性别看爱情（三） http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a8845f30d4554db33f3
透过性别看爱情（四） http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;下载地址处理&#34;&gt;下载地址处理&lt;/h1&gt;
&lt;p&gt;软件自身的下载速度太慢，而且不支持断点续传，所以自然就想到使用旋风这样的下载工具来下载。那么问题来了，我怎么样才能把我前面得到的列表处理成可以直接创建任务的格式呢？想到了C++的freopen命令，加上字符串处理，妥妥的有木有。
思路比较简单，就不详细说明具体的实现了，直接上代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#define MAXN 10000+10
char a[MAXN][MAXN];
int i = 0;
int main(int argc, char const *argv[])
{
freopen(&amp;quot;in.txt&amp;quot;, &amp;quot;r&amp;quot;, stdin);
freopen(&amp;quot;out.txt&amp;quot;, &amp;quot;w&amp;quot;, stdout);
while (~scanf(&amp;quot;%s&amp;quot;, a[i++]))
{
;
}
for (int j = 1; j &amp;lt; i; j += 2) //一定要考虑视频列表的空格分隔
{
cout &amp;lt;&amp;lt; a[j] &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用这个处理之后的结果就是这样&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a888dc9b2f5485762f7
http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88c47ff350721a07be
http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a8845f30d4554db33f3
http://video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据代码很容易就能看出来，你得自己把视频名称神马的玩意儿删掉，要不然是不能得到正确结果的= =。有空的时候再来优化一下，现在先将就着用。&lt;/p&gt;
&lt;h1 id=&#34;视频重命名&#34;&gt;视频重命名&lt;/h1&gt;
&lt;p&gt;新的问题来了，下载到的视频全都是&lt;code&gt;a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace&lt;/code&gt;这样的格式，根本就不能区别到底是什么内容。我一开始的办法是自己手动定位，手动重命名。重复了几次之后，感觉不能忍，效率太低了，我得想想办法。
在windows的cmd中，&lt;code&gt;ren a b&lt;/code&gt;命令可以把当前目录下a文件重命名为b。然后我又知道，在cpp文件中，可以通过system()函数调用cmd中的命令。于是解决方案出来了，我只要构造出一个命令的字符串就能解决这样的问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#define MAXN 500
char before[MAXN], after[MAXN];
int main(int argc, char const *argv[])
{
freopen(&amp;quot;in.txt&amp;quot;, &amp;quot;r&amp;quot;, stdin);
while (~scanf(&amp;quot;%s%s&amp;quot;, after, before))
{
char order[MAXN] = &amp;quot;ren &amp;quot;;
int lensub = strlen(before + 26); //用来清除http://video.superlib.com/这个前缀
for (int i = 0; i &amp;lt; lensub; i++)
{
before[i] = before[i + 26]; //得到正确的文件名
}
before[lensub] = &#39;\0&#39;;
strcat(order, before); //strcat(a,b)，将字符串b接在a的后面
int len = strlen(order);
order[len] = &#39; &#39;;
order[len + 1] = &#39;\0&#39;;
strcat(order, after);
system(order);//system(&amp;quot;abc&amp;quot;)，在cmd中执行abc命令
memset(after, 0, sizeof(after));
memset(before, 0, sizeof(before));
}
return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就这样，轻松搞定了~。
有一个缺陷是，这样重命名出来的文件是没有后缀名的，还需要自己再处理一下。嗯哼，还是一样的，先将就着用吧，回头再来优化一下。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;尾言&#34;&gt;尾言&lt;/h1&gt;
&lt;p&gt;除了下载工具，所有代码（虽然垃圾，但还是劳动成果啊= =）都是我个人的作品，转载请注明来源。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年01月07日 首次更新，首个版本发布啦。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Sublime Text 3 化身为高大上的C/C&#43;&#43; IDE</title><link>https://xuanwo.io/2014/06/05/sublime-text-3-ide/</link><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>https://xuanwo.io/2014/06/05/sublime-text-3-ide/</guid><description>&lt;p&gt;我是一只有着小小的强迫症的苦逼菜鸟，敲代码追求一个爽快。原来一直在用Code::Blocks，虽然说是用C++开发的，效率很高，但是每次启动的时候总是要盯着它不怎么样的启动页看很久，不开心= =。这两天开始接触Sublime Text，顿时被迷住了，不管不顾的决定把它改造成一个狂霸酷拽屌的IDE，所以，走你～～&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;以下均为Sublime Text 3 3083版 更新于26 March 2015&lt;/p&gt;
&lt;h3 id=&#34;os-x&#34;&gt;OS X&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203083.dmg&#34;&gt;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203083.dmg&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows-32-bit&#34;&gt;Windows 32 bit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203083%20Setup.exe&#34;&gt;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203080%20Setup.exe&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows-64-bit&#34;&gt;Windows 64 bit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203083%20x64%20Setup.exe&#34;&gt;http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203080%20x64%20Setup.exe&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ubuntu-32-bit&#34;&gt;Ubuntu 32 bit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3083_i386.deb&#34;&gt;http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3080_i386.deb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ubuntu-64-bit&#34;&gt;Ubuntu 64 bit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3083_amd64.deb&#34;&gt;http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3080_amd64.deb&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;运行环境&#34;&gt;运行环境&lt;/h2&gt;
&lt;h3 id=&#34;windows下&#34;&gt;Windows下&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;以MinGW为例，其他编译系统类似&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;下载安装mingw&#34;&gt;下载安装MinGW&lt;/h3&gt;
&lt;p&gt;有被墙的风险，如果不能访问，请在某管，某三的软件管家中搜索MinGW
&lt;a href=&#34;http://sourceforge.net/projects/mingw/files/&#34;&gt;http://sourceforge.net/projects/mingw/files/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加系统环境变量&#34;&gt;添加系统环境变量&lt;/h3&gt;
&lt;p&gt;默认条件下是&lt;code&gt;C:/MinGW/bin&lt;/code&gt;，如果不是请自行修改，将其添加到PATH之后，记得不要忘记分号。如果不知道如何修改系统环境变量，请参考&lt;a href=&#34;http://www.java.com/zh_CN/download/help/path.xml&#34; title=&#34;如何设置或更改 PATH 系统变量？&#34;&gt;http://www.java.com/zh_CN/download/help/path.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行CMD(开始-&amp;gt; 运行-&amp;gt; Cmd)，输入：mingw-get后则会运行MinGW界面，这里说明变量设置成功。然后输入：g++ -v，用于检测安装g++有没有成功。&lt;/p&gt;
&lt;h4 id=&#34;建立新的编译系统&#34;&gt;建立新的编译系统&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Tools –&amp;gt; Build System –&amp;gt; New Build System&lt;/code&gt;
在打开的页面中粘贴以下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;g++&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;-std=c++11&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file_path}/${file_base_name}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;/c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file_base_name} &amp;amp; echo. &amp;amp; pause&amp;#34;&lt;/span&gt;],
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;file_regex&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;working_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file_path}&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;source.c, source.c++&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;encoding&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cp936&amp;#34;&lt;/span&gt;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存，并且取一个自己喜欢的名字，在&lt;code&gt;Tools-&amp;gt;Build System&lt;/code&gt;中选择即可。&lt;/p&gt;
&lt;p&gt;如果复制出现问题，请访问 &lt;a href=&#34;https://gist.github.com/Xuanwo/0cb4bce76929ed764daf&#34;&gt;https://gist.github.com/Xuanwo/0cb4bce76929ed764daf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux下&#34;&gt;Linux下&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;以Ubuntu为例，系统不同请自行修改终端参数。&lt;/code&gt;
建立新的编译系统
&lt;code&gt;Tools –&amp;gt; Build System –&amp;gt; New Build System&lt;/code&gt;
在打开的页面中粘贴以下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;g++&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file_path}/${file_base_name}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;gnome-terminal&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;-x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;g++ &amp;#39;${file}&amp;#39; -o &amp;#39;${file_path}/${file_base_name}&amp;#39; &amp;amp;&amp;amp; &amp;#39;${file_path}/${file_base_name}&amp;#39; ;read -n1 -p &amp;#39;press any key to continue.&amp;#39;&amp;#34;&lt;/span&gt;],
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;file_regex&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;working_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;${file_path}&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;source.c, source.c++&amp;#34;&lt;/span&gt;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存，并且取一个自己喜欢的名字，在&lt;code&gt;Tools-&amp;gt;Build System&lt;/code&gt;中选择即可。&lt;/p&gt;
&lt;p&gt;如果复制出现问题，请访问 &lt;a href=&#34;https://gist.github.com/Xuanwo/31ac95e82d446db37c2e&#34;&gt;https://gist.github.com/Xuanwo/31ac95e82d446db37c2e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;收工&#34;&gt;收工&lt;/h3&gt;
&lt;p&gt;一个简单的IDE已经构建完毕了，下面可以进行一些简单的测试。&lt;/p&gt;
&lt;p&gt;编译并运行&lt;code&gt;Ctrl+B&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;h3 id=&#34;界面&#34;&gt;界面&lt;/h3&gt;
&lt;h4 id=&#34;字体-主题风格等设置&#34;&gt;字体、主题风格等设置&lt;/h4&gt;
&lt;p&gt;当需要更改主题时，直接可以通过&lt;code&gt;Preferences —&amp;gt; Color Scheme&lt;/code&gt;来设置，主界面上只能改变字体的大小。若需要改变字体和字体大小，可以先&lt;code&gt;Preferences —&amp;gt; Browse Packages&lt;/code&gt;，找到&lt;code&gt;Default&lt;/code&gt;文件夹，然后找到&lt;code&gt;Preferences.sublime-settings&lt;/code&gt;这个文件，用Sublime Text 3打开这个文件，这个文件保存了一些常用的设置，比如字体、主题风格、是否显示行号、智能提示延迟时间等，可以根据自己的需要自行设置。&lt;/p&gt;
&lt;h4 id=&#34;打开-关闭-侧边栏-右边缩略图等常用面板&#34;&gt;打开（关闭）侧边栏、右边缩略图等常用面板&lt;/h4&gt;
&lt;p&gt;默认情况下Sublime Text 3是没有打开侧边栏文件浏览器的，可以通过&lt;code&gt;View&lt;/code&gt;来打开和关闭侧边栏，默认情况下Sublime Text 3右边是有文件的缩略图的，可以通过&lt;code&gt;View&lt;/code&gt;来打开和关闭缩略图。&lt;/p&gt;
&lt;h4 id=&#34;快捷键寻找文件和已定义的函数&#34;&gt;快捷键寻找文件和已定义的函数&lt;/h4&gt;
&lt;p&gt;在Sublime Text 3中可以非常快速地切换到想找的文件，只需要通过&lt;code&gt;Ctrl+P&lt;/code&gt;打开切换面板即可。然后输入想找的文件名称就可以快速找切换到该文件了。如果想要找函数，可以通过输入&lt;code&gt;@+函数名&lt;/code&gt;可以快速切换到定义该函数的文件。&lt;/p&gt;
&lt;h3 id=&#34;插件&#34;&gt;插件&lt;/h3&gt;
&lt;h4 id=&#34;package-control&#34;&gt;Package Control&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;必装的插件，有了它可以很方便的安装和管理其他的插件。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用快捷键&lt;code&gt;ctrl+反斜杠&lt;/code&gt;或者 &lt;code&gt;View -&amp;gt; Show Console&lt;/code&gt;打开命令行，粘贴以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;urllib.request&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;hashlib&lt;/span&gt;; h &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;eb2297e1a458f27d836c04bb0cbaf282&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;d0e7a3098092775ccb37ca9d6b2e4b7d&amp;#39;&lt;/span&gt;; pf &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Package Control.sublime-package&amp;#39;&lt;/span&gt;; ipp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; sublime&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;installed_packages_path(); urllib&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;request&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;install_opener( urllib&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;request&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;build_opener( urllib&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;request&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;ProxyHandler()) ); by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; urllib&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;request&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;urlopen( &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;http://packagecontrol.io/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; pf&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;%20&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;read(); dh &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sha256(by)&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;hexdigest(); &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Error validating download (got &lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt; instead of &lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;), please try manual install&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; (dh, h)) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; dh &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; h &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;open&lt;/span&gt;(os&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;join( ipp, pf), &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; )&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;write(by)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果复制出现问题，请访问&lt;a href=&#34;https://gist.github.com/Xuanwo/fd4e4388099536bcdd65&#34;&gt;https://gist.github.com/Xuanwo/fd4e4388099536bcdd65&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;converttoutf8&#34;&gt;ConvertToUTF8&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;此插件可以有效的解决中文乱码问题&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+P&lt;/code&gt;打开切换面板，输入&lt;code&gt;PackageControl&lt;/code&gt;回车，打开包管理。输入或者点击&lt;code&gt;install&lt;/code&gt;进入安装页面，等待片刻后，在新弹出的窗口中输入&lt;code&gt;ConvertToUTF8&lt;/code&gt;，点击它便开始自动下载安装。&lt;/p&gt;
&lt;p&gt;如果出现乱码，只要在&lt;code&gt;File&lt;/code&gt;里面找到&lt;code&gt;Encoding&lt;/code&gt;并选择合适的编码模式即可，快捷键&lt;code&gt;Ctrl+Shift+C&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;astyleformatter&#34;&gt;AStyleFormatter&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Sublime Text 3下的C/C++代码整理工具，好像还支持java&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+P&lt;/code&gt;打开切换面板，输入&lt;code&gt;PackageControl&lt;/code&gt;回车，打开包管理。输入或者点击&lt;code&gt;install&lt;/code&gt;进入安装页面，等待片刻后，在新弹出的窗口中输入&lt;code&gt;AStyleFormatter&lt;/code&gt;，点击它便开始自动下载安装。&lt;/p&gt;
&lt;p&gt;使用时只要在代码编辑页面右击，选择&lt;code&gt;AStyleFormatter-&amp;gt;Format&lt;/code&gt;即可,快捷键为&lt;code&gt;Ctrl+Alt+F&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;insertdate&#34;&gt;InsertDate&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;顾名思义，此插件用于在文中快速插入时间&lt;/em&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt;打开切换面板，输入&lt;code&gt;PackageControl&lt;/code&gt;回车，打开包管理。输入或者点击&lt;code&gt;install&lt;/code&gt;进入安装页面，等待片刻后，在新弹出的窗口中输入&lt;code&gt;InsertDate&lt;/code&gt;，点击它便开始自动下载安装。&lt;/p&gt;
&lt;p&gt;默认的键位需要用到&lt;code&gt;F5&lt;/code&gt;键，但是ThinkPad默认状态下需要同时按&lt;code&gt;Fn&lt;/code&gt;才能使用&lt;code&gt;F5&lt;/code&gt;，所以修改一下键位吧。&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Preferences-&amp;gt;Key Bindings - Users&lt;/code&gt;，打开自定义键位设置，输入如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
{ &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;ctrl+m&amp;#34;&lt;/span&gt;], &lt;span style=&#34;&#34;&gt;//ctrl+m可以换成任意一组没有冲突的组合键&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;insert_date&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;%H:%M:%S&amp;#34;&lt;/span&gt;} },
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，不管在什么状态下，我都能用&lt;code&gt;Ctrl+m&lt;/code&gt;输入当前时间了～&lt;/p&gt;
&lt;h3 id=&#34;代码片段-snippet-功能&#34;&gt;代码片段(&lt;code&gt;snippet&lt;/code&gt;)功能&lt;/h3&gt;
&lt;p&gt;点击&lt;code&gt;Tools-&amp;gt;New Snippet&lt;/code&gt;之后，会新建一个文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;snippet&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;Hello, ${1:this} is a ${2:snippet}. //这里输入你想要键入的代码～
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- &amp;lt;tabTrigger&amp;gt;hello&amp;lt;/tabTrigger&amp;gt; --&amp;gt;&lt;/span&gt; //这里把hello换成你想要使用的快捷键。
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- Optional: Set a scope to limit where the snippet will trigger --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- &amp;lt;scope&amp;gt;source.python&amp;lt;/scope&amp;gt; --&amp;gt;&lt;/span&gt; //这里选择起作用的文件类型
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/snippet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置完毕之后，&lt;code&gt;Ctrl+S&lt;/code&gt;保存，默认会保存在User文件夹下，为了方便管理，不妨新建一个Snippet文件夹，后缀名为&lt;code&gt;.sublime-snippet&lt;/code&gt;。保存好之后，就可以使用啦～
用我自己的一个Snippet文件举例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;snippet&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;cstdlib&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;cstring&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;ctime&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;vector&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;deque&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;list&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;set&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;map&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;stack&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;queue&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;numeric&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;iomanip&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;bitset&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;sstream&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#include &amp;lt;fstream&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#define debug puts(&amp;#34;-----&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#define pi (acos(-1.0))
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#define eps (1e-8)
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;#define inf (1&amp;lt;&amp;lt;30)
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;using namespace std;
&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;]]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;tabTrigger&amp;gt;&lt;/span&gt;#init&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/tabTrigger&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;C/C++ header file&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt; //描述信息，可选
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&amp;lt;!-- Optional: Set a scope to limit where the snippet will trigger --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;source.c, source.c++&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;lt;/snippet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该文件起到的作用就是，当我输入&lt;code&gt;#init&lt;/code&gt;并敲击&lt;code&gt;Tab&lt;/code&gt;时，会自动将&lt;code&gt;#init&lt;/code&gt;转换成我预先设定的代码。&lt;/p&gt;
&lt;h3 id=&#34;备份&#34;&gt;备份&lt;/h3&gt;
&lt;p&gt;配置到现在，Sublime也算用的顺手了，要是换一台电脑都得这么捣鼓一下，肯定得疯。所以下面介绍一下如何同步自己的Sublime配置——只要备份&lt;code&gt;Packages\User&lt;/code&gt;文件夹即可，里面的&lt;code&gt;sublime-settings&lt;/code&gt;文件都保存了你的所有设置，更换电脑之后，只要恢复过去，打开Sublime的时候会自动检测，下载并安装你需要的包。&lt;/p&gt;
&lt;h4 id=&#34;windows下-1&#34;&gt;Windows下&lt;/h4&gt;
&lt;p&gt;备份文件夹：&lt;code&gt;C:\Users\yourusername\AppData\Roaming\Sublime Text 3\Packages\User&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;linux下-1&#34;&gt;Linux下&lt;/h4&gt;
&lt;p&gt;备份文件夹：&lt;code&gt;~/Library/Application/Support/Sublime\ Text\ 3/Packages/User&lt;/code&gt;
注意空格的转义= =。&lt;code&gt;rm -rf /usr /balabala&lt;/code&gt;之类的梗我才没有听说过呢。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;尾言&#34;&gt;尾言&lt;/h2&gt;
&lt;p&gt;出于个人喜好，没有附带汉化以及破解教程。&lt;/p&gt;
&lt;p&gt;毕竟是用来敲代码的，软件本身是英文的还是中文的其实影响不大，所以费尽心思折腾汉化没有什么意思。此外，支持正版从我做起，ST的作者并没有刻意的进行反盗版处理，使用一些简单的汇编工具就可以进行破解，但是出于对作者的尊重，我没有这样做。因为就算是未破解版也不过是跳出一个提示窗口而已，功能完全没有阉割，已经非常厚道了。总之，求汉化，求破解的人可以去Google看看，这里是不会有了。&lt;/p&gt;
&lt;p&gt;本文仓促完工，如果有不正确的地方请在下方评论窗口指出，谢谢。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2014年06月05日 写完全文，观察效果，并发布&lt;/li&gt;
&lt;li&gt;2014年07月03日 博客迁移至Hexo，做细节调整&lt;/li&gt;
&lt;li&gt;2014年08月08日 添加了Sublime在Linux下的&lt;code&gt;.buildsystem&lt;/code&gt;代码&lt;/li&gt;
&lt;li&gt;2014年08月16日 添加了关于Snippet功能和快速插入时间插件的介绍。&lt;/li&gt;
&lt;li&gt;2014年08月22日 添加了关于备份Sublime设定的介绍&lt;/li&gt;
&lt;li&gt;2014年09月01日 更新Sublime Text 3下载链接至3065版本，增加Changelog，修改下载地址。&lt;/li&gt;
&lt;li&gt;2015年01月06日 采纳读者建议，修改了编译系统部分的文字，现在更加容易懂了~&lt;/li&gt;
&lt;li&gt;2015年03月25日 新版本的Build变得有点傻逼- -，重新修改了sublime-build，现在只需要一次按键就能编译并运行了~，Linux下没有进行测试，求反馈。&lt;/li&gt;
&lt;li&gt;2015年06月30日 更新Sublime Text 3下载链接至3083版本，更新了Toc上的BUG，修复了Package Control的安装脚本。&lt;/li&gt;
&lt;li&gt;2015年07月01日 去除了有些累赘的更新信息&lt;/li&gt;
&lt;li&gt;2015年09月02日 修复了一些排版上的BUG&lt;/li&gt;
&lt;li&gt;2016年02月26日 博主主力编辑器已切换至Neovim，本文不再维护，敬请谅解&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>