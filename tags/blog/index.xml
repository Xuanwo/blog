<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Xuanwo&#39;s Blog</title><link>https://xuanwo.io/tags/blog/</link><description>Recent content in Blog on Xuanwo&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 02 Dec 2018 08:05:00 +0000</lastBuildDate><atom:link href="https://xuanwo.io/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>再见，xuanwo.org</title><link>https://xuanwo.io/2018/12/02/goodbye-xuanwo-org/</link><pubDate>Sun, 02 Dec 2018 08:05:00 +0000</pubDate><guid>https://xuanwo.io/2018/12/02/goodbye-xuanwo-org/</guid><description>&lt;p&gt;一句话新闻：启用新域名 &lt;code&gt;xuanwo.io&lt;/code&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;影响&#34;&gt;影响&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;个人域名切换到了 &lt;code&gt;xuanwo.io&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;所有指向 &lt;code&gt;xuanwo.org&lt;/code&gt; 请求都会被 301 到 &lt;code&gt;xuanwo.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有发往 &lt;code&gt;xuanwo.org&lt;/code&gt; 域的邮件暂时不受影响&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xuanwo.org&lt;/code&gt; 域名有效期到 2019 年末，目前还没有决定是否要续费&lt;/li&gt;
&lt;li&gt;RSS 订阅用户可能需要修改订阅地址（RSS 订阅会 follow 301 么？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态&#34;&gt;动态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;其实本来写了长长的告别文，回顾了过去 4 年间 xuanwo.org 的变迁，都快把自己感动哭了，但是在发布之前还是都删了，换个域名而已&lt;/li&gt;
&lt;li&gt;上周的时候朋友 A 来北京玩
&lt;ul&gt;
&lt;li&gt;跟着朋友 D 三人一起吃了顿捞王&lt;/li&gt;
&lt;li&gt;下午参观了 798，看了不少自己看不懂但是感觉很有意思的展&lt;/li&gt;
&lt;li&gt;晚上一起去了 tunight，看朋友 H 折腾了一晚上 Sony DPT 的 Android Xposed Hook，很是有意思&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;这周六跟朋友 K 见面，下次尝试了一下电影大串烧
&lt;ul&gt;
&lt;li&gt;先是看了《无名之辈》，电影很好看，虽说最后 20 分钟有点崩的厉害，但是并不是非常影响整理观感，最后的同名主题曲也非常好听&lt;/li&gt;
&lt;li&gt;然后二刷了《无敌破坏王 2》，因为之前看过了，加上晚上没有休息好，所以看到中途的时候还睡着了一会儿（并不是说它不好看啊喂）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;周日的时候参加了北航办的 !fs ，看到了可爱的 Rynco 酱，还有女装的小姐姐（还上去问了是不是女装大佬，结果发现是真小姐姐，丢人）&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>恢复博客遗失的评论</title><link>https://xuanwo.io/2018/10/15/revocer-lost-blog-comments/</link><pubDate>Mon, 15 Oct 2018 13:35:00 +0000</pubDate><guid>https://xuanwo.io/2018/10/15/revocer-lost-blog-comments/</guid><description>&lt;p&gt;最近发现自己博客的评论少了不少，于是找了一下原因并使用工具做了修复，这篇文章主要就是讲 Hugo 如何正确的配置 Disqus 以及如何使用 Disqus 提供的迁移工具来修复已经出问题的数据。&lt;/p&gt;
&lt;h2 id=&#34;hugo-sucks&#34;&gt;Hugo sucks&lt;/h2&gt;
&lt;p&gt;查看自己博客的 Discussions 的时候会看到很多奇奇怪怪的链接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://translate.googleusercontent.com/translate_c?act=url&amp;amp;depth=1&amp;amp;ie=UTF8&amp;amp;prev=_t&amp;amp;sl=auto&amp;amp;sp=nmt4&amp;amp;tl=en&amp;amp;u=https://xuanwo.io/2014/07/16/poj-1011-sticks/
https://translate.googleusercontent.com/translate_c?depth=1&amp;amp;sl=zh-CN&amp;amp;sp=nmt4&amp;amp;tl=en&amp;amp;u=https://xuanwo.io/2015/02/07/generate-a-ssh-key/&amp;amp;xid=17259,15700022,15700124,15700149,15700168,15700186,15700190,15700201,15700208
https://webcache.googleusercontent.com/search?q=cache:RMRC2X9nD0EJ:https://xuanwo.io/2017/11/26/enpass-intro/+&amp;amp;cd=1&amp;amp;ct=clnk&amp;amp;gl=jp&amp;amp;lr=lang_zh-CN%7Clang_zh-TW
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然啦，自己的博客有外国友人开着 Google 翻译看自然会觉得开心，但是为啥这些奇怪的地址会被作为这篇文章评论的 URL 存入 Disqus 呢？&lt;/p&gt;
&lt;p&gt;首先看了下网页的源代码中与 disqus 有关的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; disqus_config &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt; () {
};
(&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; ([&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;].indexOf(&lt;span style=&#34;color:#007020&#34;&gt;window&lt;/span&gt;.location.hostname) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;) {
&lt;span style=&#34;color:#007020&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;disqus_thread&amp;#39;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Disqus comments not available by default when the website is previewed locally.&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt;;
}
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;document&lt;/span&gt;, s &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d.createElement(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;); s.&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;;
s.src &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;//&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;only0god&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;;
s.setAttribute(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;data-timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;Date&lt;/span&gt;());
(d.head &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt; d.body).appendChild(s);
})();
&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 &lt;code&gt;disqus_config&lt;/code&gt; 是空的，此时首先会感到有些不对劲，接下来看一下 disqus 文档对这个 config 是如何处理的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When url or identifier are not defined, the Disqus embed will use the window URL as the main identifier when creating a thread. In other words, each unique URL Disqus loads on will result in a new unique thread. This works well for some sites, however, this method of creating threads can lead to duplicate “split threads” for the same page of content, especially when your site accepts many different URLs for the same page of content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以如果 &lt;code&gt;disqus_config&lt;/code&gt; 是空的，那 disqus 就会取当前的 window URL 创建一个条目。换言之，如果用户通过多个不同的 URL 访问到你这篇博客，那么你的博客就会有多个不一样的评论条目。&lt;/p&gt;
&lt;p&gt;现在导致 disqus 出现重复的原因知道了，那为什么会这样呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;var disqus_config = function () {
{{with .GetParam &amp;#34;disqus_identifier&amp;#34; }}this.page.identifier = &amp;#39;{{ . }}&amp;#39;;{{end}}
{{with .GetParam &amp;#34;disqus_title&amp;#34; }}this.page.title = &amp;#39;{{ . }}&amp;#39;;{{end}}
{{with .GetParam &amp;#34;disqus_url&amp;#34; }}this.page.url = &amp;#39;{{ . | html }}&amp;#39;;{{end}}
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是 Hugo 内嵌的 disqus 模板，看得出来，Hugo 为了追求灵活性（总有人想用奇奇怪怪的 URL 作为 disqus 的 url），他选择读取当前页面的参数，而不是直接写死了一个规定的值。这就很坑了，我选择自己改一下这个模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;var disqus_config = function () {
this.page.identifier = &amp;#39;{{ .URL }}&amp;#39;;
this.page.title = &amp;#39;{{ .Title }}&amp;#39;;
this.page.url = &amp;#39;{{ .Permalink }}&amp;#39;;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;URL 是当前页面的相对路径&lt;/li&gt;
&lt;li&gt;Title 是当前页面的标题&lt;/li&gt;
&lt;li&gt;Permalink 是当前页面的完整 URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; disqus_config &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;this&lt;/span&gt;.page.identifier &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;\/2018\/10\/03\/ingress-beijing-central-axis\/&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;this&lt;/span&gt;.page.title &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Ingress 北京中轴线噩梦难度一日速刷攻略&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;this&lt;/span&gt;.page.url &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;https:\/\/xuanwo.io\/2018\/10\/03\/ingress-beijing-central-axis\/&amp;#39;&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;此处的 &lt;code&gt;\&lt;/code&gt; 是 JavaScript 的转义，实际的内容中并不包括 &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;disqus-的-url-mapper&#34;&gt;Disqus 的 URL Mapper&lt;/h2&gt;
&lt;p&gt;现在已经修复了问题的源头，那现在这个烂摊子如何收拾呢？好在我们有 Disqus 的 URL Mapper，这个工具可以批量的将一组 URL 映射到另外一组 URL 上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 A 映射为 B，那么 A 的评论就会迁移到 B 上&lt;/li&gt;
&lt;li&gt;将 A，B 都映射为 B，那么相当于把 A 和 B 两个页面的评论合并到了 B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用起来也非常简单，访问自己网站的控制面板 &lt;code&gt;TOOLS -&amp;gt; Migration Tools -&amp;gt; URL Mapper&lt;/code&gt;，首先下载一个 csv，里面会包括网站的所有评论链接，然后按照如下规则修改即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果想将 A 修改为 B，那么只需要增加一列，写上 B 即可&lt;/li&gt;
&lt;li&gt;如果想跳过 A，那么直接将 A 这一行删除即可&lt;/li&gt;
&lt;li&gt;如果 B 为空的话，我也不知道会发生什么，没试过（&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我是直接将 CSV 上传到了 Google Sheet，然后用它的函数一阵操作搞定了，简单分享一哈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LOWER(REPLACE(AXXX,1,4,&amp;quot;https&amp;quot;))&lt;/code&gt; 可以将 protocol 修改为 https 并全部转换为小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REGEXEXTRACT(AXXX, &amp;quot;https://xuanwo.io[\/\w-]*/&amp;quot;)&lt;/code&gt; 可以从 URL 的 Query 中提取出链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将修改好的 CSV 导出并上传，等到 disqus 异步处理即可。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.disqus.com/troubleshooting/use-configuration-variables-to-avoid-split-threads-and-missing-comments&#34;&gt;Use Configuration Variables to Avoid Split Threads and Missing Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/commit/bfb38029cabe8f3a5b1c33f808644e89cb5111b9&#34;&gt;themes: Fix disqus identifier not set correctly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态&#34;&gt;动态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RNG 差点在小组赛翻车，最后连续干掉三星和状态火热的 C9，成功以小组第一出线（真的不容易，最后一波团真的是太刺激了），希望 EDG 和 iG 也能顺利出线~&lt;/li&gt;
&lt;li&gt;不知道为啥突然开始了规律作息，每天 7:30 起床，9 点到公司，感觉很爽，仿佛自己的人生突然多出来一个上午（&lt;/li&gt;
&lt;li&gt;最近成功加入了 Archlinuxcn 的打包组，并且把我常用的一些包加进了 cn 源，比如 &lt;a href=&#34;https://github.com/archlinuxcn/repo/tree/master/coredns&#34;&gt;coredns&lt;/a&gt;，我这个包可比 AUR 上的那个用心多了，欢迎大家使用并反馈意见~&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Xuanzang —— 一款开箱即用的全文搜索引擎</title><link>https://xuanwo.io/2018/05/01/xuanzang-intro/</link><pubDate>Tue, 01 May 2018 13:30:00 +0000</pubDate><guid>https://xuanwo.io/2018/05/01/xuanzang-intro/</guid><description>&lt;p&gt;&lt;a href=&#34;https://github.com/Xuanwo/xuanzang&#34;&gt;Xuanzang&lt;/a&gt;, 中文名：玄奘，是一个支持中文分词的开源全文搜索引擎。其目标是做一个开箱即用，不需要复杂的部署和配置，可以方便的嵌入静态网站的全文搜索引擎。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;Xuanzang 的使用非常简单，只需要在 &lt;a href=&#34;https://github.com/Xuanwo/xuanzang/releases&#34;&gt;releases&lt;/a&gt; 处下载实现编译好的二进制文件。按照要求填写一些配置文件，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;host:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;port:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;db_path:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/project/xuanzang/database&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;index_path:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/project/xuanzang/index&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;source:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;type:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sitemap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;url:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://xuanwo.io/sitemap.xml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;duration:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;3600&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;dictionary:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/project/xuanzang/dictionary.txt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;stop_tokens:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/project/xuanzang/stop_tokens.txt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;logger:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;level:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;debug&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;output:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/project/xuanzang/log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述的配置文件将会监听本地的 &lt;code&gt;8080&lt;/code&gt; 端口，并使用 &lt;code&gt;/project/xuanzang/database&lt;/code&gt; 存放数据库，使用 &lt;code&gt;/project/xuanzang/index&lt;/code&gt; 目录存放索引。接下来的 &lt;code&gt;source&lt;/code&gt; 指定了源站的类型和两次抓取的间隔时间。对于个人博客而言，一个小时的抓取间隔已经足够了。下面的 &lt;code&gt;dictionary&lt;/code&gt; 和 &lt;code&gt;stop_tokens&lt;/code&gt; 是 Xuanzang 使用的字典和停止词，如果没有特殊的需求，可以使用项目自带的，在&lt;a href=&#34;https://github.com/Xuanwo/xuanzang/tree/master/data&#34;&gt;此处&lt;/a&gt;下载。&lt;code&gt;logger&lt;/code&gt; 则指定了 log 文件的位置和级别。&lt;/p&gt;
&lt;p&gt;接下来就只需要启动 Xuanzang：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;:&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; xuanzang -c /path/to/config.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以搜索我的朋友 &lt;a href=&#34;https://pjw.io/&#34;&gt;Aspire&lt;/a&gt; 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;:&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; curl &lt;span style=&#34;color:#40a070&#34;&gt;127&lt;/span&gt;.0.0.1:8080?text&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;aspire
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;aspire&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;友情链接 // Xuanwo&amp;#39;s Blog&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;https://xuanwo.io/blogroll/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;content_text&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}]&lt;/span&gt;,&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;:1&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接入博客十分容易，只需要通过 Ajax 向 Xuanzang 发出请求，并解析返回的 JSON 插入正确的 DOM，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt; search() {
&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; text &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;decodeURI&lt;/span&gt;(&lt;span style=&#34;color:#007020&#34;&gt;window&lt;/span&gt;.location.search.substring(&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;).split(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;].split(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;]);
$(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;.archive-category&amp;#34;&lt;/span&gt;).text(&lt;span style=&#34;color:#4070a0&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;text&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34; 的搜索结果`&lt;/span&gt;);
$.getJSON(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;/search?text=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; text, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt;(result) {
$.each(result.docs, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;function&lt;/span&gt;(i, field) {
$(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;.archives&amp;#34;&lt;/span&gt;).append(&lt;span style=&#34;color:#4070a0&#34;&gt;`&amp;lt;a href=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;field.url&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;field.title&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;/a&amp;gt;`&lt;/span&gt;);
});
});
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Search 页面的 Body 中设置 &lt;code&gt;onload=&amp;quot;search()&amp;quot;&lt;/code&gt; 并在 form 表单中设置 &lt;code&gt;action=&amp;quot;/search_result&amp;quot; method=&amp;quot;get&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;具体的实现可以参考&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/commit/3a7049df0a8fb9d685704283cfc0f6fdc264035d&#34;&gt;这个 Commit&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前本博客的全文搜索就是通过 Xuanzang 实现的，感兴趣的朋友可以试用一下~&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;Xuanzang 解决中文全文搜索的思路非常简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过事先指定的 sitemap 文件来遍历 &amp;amp; 抓取网页&lt;/li&gt;
&lt;li&gt;使用一个支持中文分词的全文搜索引擎来做索引&lt;/li&gt;
&lt;li&gt;对外暴露一个简化的 API 接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我们分别介绍一下这三个部分。&lt;/p&gt;
&lt;h3 id=&#34;抓取网页&#34;&gt;抓取网页&lt;/h3&gt;
&lt;p&gt;现在静态网站的生成工具多如牛毛，每个工具采用的模板都不大一样，因此不可能走为每种静态网站生成工具适配模板的道路。那有没有一种方法可以实时的获取到网站内容的变更呢？那就是 &lt;a href=&#34;https://www.sitemaps.org/protocol.html&#34;&gt;Sitemap&lt;/a&gt;，又叫做站点地图。几乎所有的静态网站生成工具都支持生成 Sitemap，这解决了获取网站内容的问题。同时 Sitemap 除了网址以外，还有 &lt;code&gt;lastmod&lt;/code&gt; 属性，可以获取到对应页面的最后修改时间。因此只需要抓取 Sitemap 文件，我们就可以知道整个网站都有哪些页面以及他们上次更新是什么时候了，这样就解决了获取网站内容变更的问题。同时我们可以在本地记录一下索引更新的时间，如果索引更新的时间比网页更新的时间要晚，那就可以直接跳过这个页面，从而避免每次都需要抓取。&lt;/p&gt;
&lt;h3 id=&#34;中文分词&#34;&gt;中文分词&lt;/h3&gt;
&lt;p&gt;Xuanzang 底层使用了 &lt;a href=&#34;https://github.com/huichen&#34;&gt;@huichen&lt;/a&gt; 开发的 &lt;a href=&#34;https://github.com/huichen/wukong&#34;&gt;wukong&lt;/a&gt;。中文分词这一块没有做什么大的改进，基本上就是直接拿过来用了。虽说搜索的精度还不是很高，但是马马虎虎还能用，对于个人博客而言已经足够了。&lt;/p&gt;
&lt;h3 id=&#34;api-接口&#34;&gt;API 接口&lt;/h3&gt;
&lt;p&gt;目前对外只提供了一个 &lt;code&gt;GET&lt;/code&gt; 接口，返回的数据结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Response is the response for search.
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;type&lt;/span&gt; Response &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
Tokens []&lt;span style=&#34;color:#902000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;tokens&amp;#34;`&lt;/span&gt;
Docs []Document &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;docs&amp;#34;`&lt;/span&gt;
Total &lt;span style=&#34;color:#902000&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;total&amp;#34;`&lt;/span&gt;
}
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Document is the document that scored.
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;type&lt;/span&gt; Document &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
Title &lt;span style=&#34;color:#902000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;
URL &lt;span style=&#34;color:#902000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;url&amp;#34;`&lt;/span&gt;
ContentText &lt;span style=&#34;color:#902000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;`json:&amp;#34;content_text&amp;#34;`&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预留了 &lt;code&gt;ContentText&lt;/code&gt; 属性，以后会用做提供搜索到的关键字附近的内容。&lt;/p&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;接下来简单的讲一讲 Xuanzang 和市面上其它全文搜索工具的区别。&lt;/p&gt;
&lt;h3 id=&#34;lunr-js&#34;&gt;Lunr.js&lt;/h3&gt;
&lt;p&gt;Lunr.js 是一个非常 Cool 的项目，但是 Lunr.js 不支持中文分词。不少人通过引入一个分词库并修改 Lunr.js 的 tokenizer 方法解决这个问题，其代价就是不能在浏览器端直接使用，还是需要在服务器端去提供一个服务。从我的角度来看是是已经偏离了它的目标：&lt;code&gt;A bit like Solr, but much smaller and not as bright.&lt;/code&gt; ，因此我的博客没有采用这个方案。其他的基于 js 的方案也都或多或少有这样的问题，比如在本地生成一个索引，然后搜索的时候使用 js 去 load 等等，在使用体验上都不是很好，在网站不是部署在国内时，这个问题尤为严重。&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch&#34;&gt;Elasticsearch&lt;/h3&gt;
&lt;p&gt;（首先， Elasticsearch 是 Java 的，我这个 512M 内存的机器咋跑。。。）&lt;/p&gt;
&lt;p&gt;Elasticsearch 很棒，但是用来做博客的全文搜索，总有一种拿着大炮打蚊子的感觉。我个人只是使用过 API ，没有实际的进行过 ES 的部署和维护，这里就不多说了。&lt;/p&gt;
&lt;h3 id=&#34;google-site-search&#34;&gt;Google Site Search&lt;/h3&gt;
&lt;p&gt;这大概是接入最方便的方案了，只需要直接跳转到 google 的 &lt;code&gt;site:xuanwo.io %s&lt;/code&gt; 即可。缺点是无法控制 Google 的索引行为，也没有办法做到实时的抓取和更新。&lt;/p&gt;
&lt;h3 id=&#34;algolia-etc&#34;&gt;Algolia etc.&lt;/h3&gt;
&lt;p&gt;还有很多商业化的全文搜索服务，其中最出名的莫过于 &lt;code&gt;Algolia&lt;/code&gt; 和 &lt;code&gt;Swiftype&lt;/code&gt;。之前试用过他们的服务，搜索效果很赞，但是免费用户限制颇多： algolia 的免费服务最多只能有一万条记录，swiftype 则是只提供了一段时间的免费试用，同时还限制了抓取的频率。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Xuanzang 在前人已有工作的基础上提供了一套简单易用的中文网站全文搜索解决方案，不需要复杂的参数调节和运维工作，按照文档部署即可使用，兼容市面上绝大多数静态网站生成工具，各位朋友了解一下？&lt;/p&gt;
&lt;h2 id=&#34;动态&#34;&gt;动态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本周给大家推荐的小说： &lt;a href=&#34;http://book.zongheng.com/showchapter/189169.html&#34;&gt;《雪中悍刀行》&lt;/a&gt;，烽火戏诸侯的作品，布局精细，结构宏大，人物刻画生动，文字功底深厚，适合所有喜欢武侠小说的同学~&lt;/li&gt;
&lt;li&gt;背后故事：4 月 29 号睡前有了为自己博客增加全文搜索支持的 Idea，30 号写了一天，并于当天的晚上九点发出了第一个 Release。&lt;/li&gt;
&lt;li&gt;今天去簋街胡大饭馆吃了麻辣小龙虾，麻辣扇贝，馋嘴蛙仔，现在肚子在疯狂的翻腾。。。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Hugo RSS 配置输出全文</title><link>https://xuanwo.io/2018/04/08/hugo-rss-output-all-content/</link><pubDate>Sun, 08 Apr 2018 16:07:00 +0000</pubDate><guid>https://xuanwo.io/2018/04/08/hugo-rss-output-all-content/</guid><description>&lt;p&gt;在折腾 Feedly 的时候偶然发现自己的博客输出的 RSS 里面只有摘要，想要看完整的内容需要跳转。这可不符合我的初衷，于是花了一些时间配置了一下相关的内容。接下来简要的介绍一下如何配置 Hugo 的模板以生成输出全文的 RSS Feed。&lt;/p&gt;
&lt;h2 id=&#34;r-t-f-m&#34;&gt;R.T.F.M.&lt;/h2&gt;
&lt;p&gt;在折腾之前，首先阅读一下 Hugo 的文档： &lt;a href=&#34;https://gohugo.io/templates/rss/&#34;&gt;https://gohugo.io/templates/rss/&lt;/a&gt; 。从文档中知道了以下两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSS 模板的查找顺序&lt;/li&gt;
&lt;li&gt;Hugo 自带的 RSS 模板的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么想要自定义 RSS 模板的话，只需要在合适的地方放上模板即可。&lt;/p&gt;
&lt;h2 id=&#34;rss-模板的位置&#34;&gt;RSS 模板的位置&lt;/h2&gt;
&lt;p&gt;Hugo 内置模板查找的优先级别是最低的，所以只要选择任意一个符合要求的位置都能覆盖它。我选择放在主题的 &lt;code&gt;layouts&lt;/code&gt; 目录下，也就是 &lt;code&gt;layouts/index.rss.xml&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;rss-模板的内容&#34;&gt;RSS 模板的内容&lt;/h2&gt;
&lt;p&gt;忽略掉一些无关的细节，导致 RSS 输出的文章内容中只有摘要的是如下模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go-html-template&#34; data-lang=&#34;go-html-template&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Data.Pages&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;item&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Title&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;link&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Permalink&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;link&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;pubDate&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Date.Format&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;safeHTML&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;pubDate&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Site.Author.email&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;author&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;$.Site.Author.name&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt; (&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;)&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;author&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;guid&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Permalink&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;guid&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;description&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Summary&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;description&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;item&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.Summary&lt;/code&gt; 引用的是文章的摘要部分，只要将其替换为 &lt;code&gt;.Content&lt;/code&gt; 就能输出文章的完整内容。但是默认情况下，Hugo 会在 RSS Feed 中输出所有文章，如果输出完整内容的话，这个 Feed 会特别大，因此需要想办法限制一下展示的文章数量。继续 RTFM，&lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;此处&lt;/a&gt; 描述了一个叫 &lt;code&gt;first&lt;/code&gt; 的方法，跟 &lt;code&gt;range&lt;/code&gt; 搭配起来之后可以起到切片的作用。这样就能够得到如下的模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go-html-template&#34; data-lang=&#34;go-html-template&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;first&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;10&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Data.Pages&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;item&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Title&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;link&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Permalink&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;link&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;pubDate&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Date.Format&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;safeHTML&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;pubDate&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Site.Author.email&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;author&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;$.Site.Author.name&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt; (&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;)&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;author&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;guid&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Permalink&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;guid&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;description&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;.Content&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;description&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;item&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整的模板可以参见 commit: &lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/commit/80347d6e7868f4443170fe926a762d496b736944&#34;&gt;https://github.com/Xuanwo/xuanwo.github.io/commit/80347d6e7868f4443170fe926a762d496b736944&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;动态&#34;&gt;动态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feedly 上除了我自己居然要还有 5 个订阅用户，有些感动，如果有在北京的童鞋可以邮件我一起约个饭~&lt;/li&gt;
&lt;li&gt;清明节去了趟苏州，看到了大裤衩，还看了金鸡湖的音乐喷泉，然后拙政园基本啥都没看着，全是人头= =，出来之后就不想再去任何园林了&lt;/li&gt;
&lt;li&gt;终于下定决心买了 ThinkPad X1 Carbon 2018 (故意写全就是为了装)，等四月底到手了发一波开箱照&lt;/li&gt;
&lt;li&gt;又要开工了，体会到了久违的小学生暑假开学前一天的心情，大概是因为以前一直没有好好的休假过。。。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>新博客上线&amp;Hexo主题开发入门</title><link>https://xuanwo.io/2016/06/29/new-blog-new-life/</link><pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate><guid>https://xuanwo.io/2016/06/29/new-blog-new-life/</guid><description>&lt;p&gt;曾经看过我的博客的同学大概都会发现，我的博客再一次大变样了~
这一次的更新其实酝酿了很久，早在刚开始用Hexo的时候就想着要有一个自己的主题。但是那个时候觉得这是一件很难的事情，要懂HTML，CSS，JavaScript，还要懂Swig，Ejs等模板语言，还要懂Hexo的内部原理，于是就一直搁置了。在独立实现了一个&lt;a href=&#34;https://xuanwo.io/2016/06/16/jade_ims/&#34;&gt;完整的项目&lt;/a&gt;之后，我认为自己已经有这样的能力了，于是决定正式开始。
在我看来的话，Hexo的使用者大概分为三个层次：第一种用别人的主题，第二种模仿现有的主题，第三种自己独立开发。我原来是第一种，在Next的基础上做了很多改动，这一次进入到了第二个层次。我找了一套自我感觉还不错的模板，然后套用它的CSS设定和页面结构，就成了我现在的主题。
利用两天学习和工作的闲暇时间，我大体上完成了这个主题。做得比较糙，很多细节还有待优化，但是我已经急不可耐地想要正式上线了，笑。在未来的话，我希望能把一些配置都能整理出来，优化一下代码，然后开源这个主题，希望大家能够喜欢~
庆祝的话已经说的差不多了，下面来讲一讲如何开发一个Hexo主题。&lt;/p&gt;
&lt;h1 id=&#34;结构&#34;&gt;结构&lt;/h1&gt;
&lt;h2 id=&#34;主题结构&#34;&gt;主题结构&lt;/h2&gt;
&lt;p&gt;Hexo主题的结构大体如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.
├── _config.yml
├── languages
│   ├── default.yml
│   └── zh-Hans.yml
├── layout
│   ├── achieve.swig
│   ├── category.swig
│   ├── index.swig
│   ├── _layout.swig
│   ├── page.swig
│   ├── _partials
│   ├── post.swig
│   └── tag.swig
└── &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt;
├── css
├── fonts
├── img
├── js
└── vendors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先有一个&lt;code&gt;_config.yml&lt;/code&gt;负责提供主题级别的配置，可以在&lt;code&gt;layout&lt;/code&gt;中通过&lt;code&gt;theme.xxx&lt;/code&gt;的形式进行调用。
然后&lt;code&gt;languages&lt;/code&gt;负责实现博客的i18N功能，如果博客没有多语言的需求，只需要实现一个&lt;code&gt;default.yml&lt;/code&gt;即可。
其次是最为重要的&lt;code&gt;layout&lt;/code&gt;文件夹，这个里面主要存放博客的结构，Hexo 引擎会使用指定的渲染引擎将&lt;code&gt;layout&lt;/code&gt;文件渲染成HTML页面。
最后是&lt;code&gt;source&lt;/code&gt;，把所有主题需要用到的资源，比如CSS，Fonts，JS等都存放到这个文件夹中。&lt;/p&gt;
&lt;p&gt;这个主题使用了&lt;a href=&#34;http://paularmstrong.github.io/swig/&#34;&gt;swig&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;页面结构&#34;&gt;页面结构&lt;/h2&gt;
&lt;p&gt;页面结构分为两个维度，一者是我要呈现哪些页面，二者是每个页面上都有哪些内容。&lt;/p&gt;
&lt;h3 id=&#34;哪些页面&#34;&gt;哪些页面？&lt;/h3&gt;
&lt;p&gt;作为一个博客，主要需要的页面有以下这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主页&lt;/li&gt;
&lt;li&gt;单页&lt;/li&gt;
&lt;li&gt;归档页面&lt;/li&gt;
&lt;li&gt;分类页面&lt;/li&gt;
&lt;li&gt;标签页面&lt;/li&gt;
&lt;li&gt;文章页&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哪些内容&#34;&gt;哪些内容？&lt;/h3&gt;
&lt;p&gt;如果没有什么特别的设计，博客的页面大体上可以分为这几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;head：头部文件&lt;/li&gt;
&lt;li&gt;body：主体内容
&lt;ul&gt;
&lt;li&gt;header：题图，导航栏等&lt;/li&gt;
&lt;li&gt;content： 内容&lt;/li&gt;
&lt;li&gt;footer：尾部的联系方式等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;实现&#34;&gt;实现&lt;/h1&gt;
&lt;p&gt;前面讲到了 Hexo 的结构，下面来聊一聊具体的实现。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;Hexo 渲染的入口是&lt;code&gt;_layout.swig&lt;/code&gt;，所以一个主题至少需要实现一个&lt;code&gt;_layout.swig&lt;/code&gt;。
然后Hexo会遍历Hexo目录下&lt;code&gt;source&lt;/code&gt;文件夹中的所有Markdown文件，根据Markdown文件所指定的layout进行渲染，默认类型为&lt;code&gt;post&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;技巧&#34;&gt;技巧&lt;/h2&gt;
&lt;h3 id=&#34;layout-swig结构&#34;&gt;_layout.swig结构&lt;/h3&gt;
&lt;p&gt;整体的结构基本如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swig&#34; data-lang=&#34;swig&#34;&gt;{% raw %}
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
{% include &amp;#39;_partials/head.swig&amp;#39; %}
&amp;lt;title&amp;gt;{% block title %}{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body id=&amp;#34;home&amp;#34;&amp;gt;
{% include &amp;#39;_partials/menu.swig&amp;#39; %}
&amp;lt;div id=&amp;#34;wrap&amp;#34;&amp;gt;
{% include &amp;#39;_partials/nav.swig&amp;#39; %}
{% include &amp;#39;_partials/header.swig&amp;#39; %}
&amp;lt;div id=&amp;#34;start&amp;#34; class=&amp;#34;container content&amp;#34;&amp;gt;
{% block content %}{% endblock %}
&amp;lt;/div&amp;gt;
{% include &amp;#39;_partials/footer.swig&amp;#39; %}
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;实现文章渲染&#34;&gt;实现文章渲染&lt;/h3&gt;
&lt;p&gt;这个地方主要是借鉴了NexT主题的设计，实现了一个swig的宏来生成对应的文章。这个宏主要有两个参数，第一个是post对象，第二个是是否为主页。如果是主页就只显示简略的内容，如果不是就输出全文。&lt;/p&gt;
&lt;p&gt;判断的部分实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swig&#34; data-lang=&#34;swig&#34;&gt;{% raw %}
{% if is_index %}
{% if post.excerpt %}
{{ post.excerpt }}
&amp;lt;a class=&amp;#34;&amp;#34; href=&amp;#34;{{ url_for(post.path) }}&amp;#34;&amp;gt;Read more&amp;lt;/a&amp;gt;
{% endif %}
{% else %}
{{ post.content }}
{% endif %}
{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用到的post页的参数可以&lt;a href=&#34;https://hexo.io/zh-cn/docs/variables.html&#34;&gt;我翻译的中文文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;分页插件&#34;&gt;分页插件&lt;/h3&gt;
&lt;p&gt;Hexo 自己实现了一个分页插件，直接使用paginator函数即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swig&#34; data-lang=&#34;swig&#34;&gt;{% raw %}
{% if page.prev or page.next %}
&amp;lt;nav class=&amp;#34;pagination&amp;#34;&amp;gt;
{{ paginator({
prev_text: &amp;#39;&amp;lt;i class=&amp;#34;fa fa-angle-left&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;,
next_text: &amp;#39;&amp;lt;i class=&amp;#34;fa fa-angle-right&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;,
mid_size: 1
}) }}
&amp;lt;/nav&amp;gt;
{% endif %}
{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;评论系统&#34;&gt;评论系统&lt;/h3&gt;
&lt;p&gt;对于Hexo来说，评论系统就是调用一个第三方的JS。所以只需要在合适的位置插入代码即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swig&#34; data-lang=&#34;swig&#34;&gt;{% raw %}
&amp;lt;div id=&amp;#34;disqus_thread&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var disqus_config = function () {
this.page.url = &amp;#39;{{ page.permalink }}&amp;#39;;
this.page.identifier = &amp;#39;{{ page.path }}&amp;#39;;
};
(function () {
var d = document, s = d.createElement(&amp;#39;script&amp;#39;);
s.src = &amp;#39;//abc.disqus.com/embed.js&amp;#39;;
s.setAttribute(&amp;#39;data-timestamp&amp;#39;, +new Date());
(d.head || d.body).appendChild(s);
})();
&amp;lt;/script&amp;gt;
{% endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;需要注意的坑&#34;&gt;需要注意的坑&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page.posts&lt;/code&gt;是按照时间排序的，但是&lt;code&gt;site.posts&lt;/code&gt;是无序的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexo.io/zh-cn/docs/&#34;&gt;Hexo 官方中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2016年06月30日 首次发布&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>史上最详细的Hexo博客搭建图文教程</title><link>https://xuanwo.io/2015/03/26/hexo-intor/</link><pubDate>Thu, 26 Mar 2015 00:22:43 +0000</pubDate><guid>https://xuanwo.io/2015/03/26/hexo-intor/</guid><description>&lt;p&gt;从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。
当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/pulls&#34;&gt;提交PR&lt;/a&gt;，&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/issues&#34;&gt;发布issues&lt;/a&gt;或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索关键词。&lt;em&gt;（是不是会有似曾相识的感觉，= =）&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;
&lt;p&gt;你需要准备好以下软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js环境&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;配置node-js环境&#34;&gt;配置Node.js环境&lt;/h3&gt;
&lt;p&gt;下载Node.js安装文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi&#34;&gt;Windows Installer 32-bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi&#34;&gt;Windows Installer 64-bit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。
如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Nodejs-install.png&#34; alt=&#34;Node.js安装界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;保持默认设置即可，一路Next，安装很快就结束了。
然后我们检查一下是不是要求的组件都安装好了，同时按下&lt;code&gt;Win&lt;/code&gt;和&lt;code&gt;R&lt;/code&gt;，打开运行窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/win-run.png&#34; alt=&#34;Windows的运行界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在新打开的窗口中输入&lt;code&gt;cmd&lt;/code&gt;，敲击回车，打开命令行界面。&lt;em&gt;（下文将直接用&lt;code&gt;打开命令行&lt;/code&gt;来表示以上操作，记住哦~）&lt;/em&gt;
在打开的命令行界面中，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Nodejs-test.png&#34; alt=&#34;Node.js安装测试&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置git环境&#34;&gt;配置Git环境&lt;/h3&gt;
&lt;p&gt;下载Git安装文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe&#34;&gt;Git-2.6.3-64-bit.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就进入了Git的安装界面，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-install.png&#34; alt=&#34;Git安装界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-path-setting.png&#34; alt=&#34;Git PATH设置&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是对上图的解释，不需要了解请直接跳过
Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Git-test.png&#34; alt=&#34;Git安装测试&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;h2 id=&#34;mac-os&#34;&gt;Mac OS&lt;/h2&gt;
&lt;h1 id=&#34;配置github&#34;&gt;配置Github&lt;/h1&gt;
&lt;h2 id=&#34;注册账号&#34;&gt;注册账号&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果已经拥有账号，请跳过此步~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;，在下图的框中，分别输入自己的用户名，邮箱，密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-sign-up.png&#34; alt=&#34;Github注册&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一定要确认注册，否则无法使用gh-pages！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建代码库&#34;&gt;创建代码库&lt;/h2&gt;
&lt;p&gt;登陆之后，点击页面右上角的加号，选择&lt;code&gt;New repository&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-create-a-new-repo.png&#34; alt=&#34;新建代码库&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入代码库创建页面：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Repository name&lt;/code&gt;下填写&lt;code&gt;yourname.github.io&lt;/code&gt;，&lt;code&gt;Description (optional)&lt;/code&gt;下填写一些简单的描述（不写也没有关系），如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-new-repo-setting.png&#34; alt=&#34;代码库设置&#34; /&gt;&lt;/p&gt;
&lt;p&gt;正确创建之后，你将会看到如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-new-repo-look-like.png&#34; alt=&#34;新代码库的界面&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;开启gh-pages功能&#34;&gt;开启gh-pages功能&lt;/h2&gt;
&lt;p&gt;点击界面右侧的&lt;code&gt;Settings&lt;/code&gt;，你将会打开这个库的setting页面，向下拖动，直到看见&lt;code&gt;GitHub Pages&lt;/code&gt;，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-pages.png&#34; alt=&#34;Github pages&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Automatic page generator&lt;/code&gt;，Github将会自动替你创建出一个gh-pages的页面。
如果你的配置没有问题，那么大约15分钟之后，&lt;code&gt;yourname.github.io&lt;/code&gt;这个网址就可以正常访问了~
如果&lt;code&gt;yourname.github.io&lt;/code&gt;已经可以正常访问了，那么Github一侧的配置已经全部结束了。&lt;/p&gt;
&lt;h1 id=&#34;配置hexo&#34;&gt;配置Hexo&lt;/h1&gt;
&lt;h2 id=&#34;安装hexo&#34;&gt;安装Hexo&lt;/h2&gt;
&lt;p&gt;在自己认为合适的地方创建一个文件夹，然后在文件夹空白处按住&lt;code&gt;Shift&lt;/code&gt;+鼠标右键，然后点击在此处打开命令行窗口。&lt;em&gt;（同样要记住啦，下文中会使用&lt;code&gt;在当前目录打开命令行&lt;/code&gt;来代指上述的操作）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在命令行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后你将会看到:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/npm-install-hexo-cli.png&#34; alt=&#34;安装hexo-cli&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可能你会看到一个&lt;code&gt;WARN&lt;/code&gt;，但是不用担心，这不会影响你的正常使用。
然后输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。
在命令行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你看到了如图文字，则说明已经安装成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-v.png&#34; alt=&#34;Hexo测试&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;初始化hexo&#34;&gt;初始化Hexo&lt;/h2&gt;
&lt;p&gt;接着上面的操作，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-init.png&#34; alt=&#34;hexo初始化&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后npm将会自动安装你需要的组件，只需要等待npm操作即可。&lt;/p&gt;
&lt;h2 id=&#34;首次体验hexo&#34;&gt;首次体验Hexo&lt;/h2&gt;
&lt;p&gt;继续操作，同样是在命令行中，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-g.png&#34; alt=&#34;hexo渲染&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后会提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中打开&lt;code&gt;http://localhost:4000/&lt;/code&gt;，你将会看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-first-time.png&#34; alt=&#34;hexo初体验&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，Hexo在本地的配置已经全都结束了。&lt;/p&gt;
&lt;h1 id=&#34;使用hexo&#34;&gt;使用Hexo&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置过程中请使用&lt;a href=&#34;http://www.yamllint.com/&#34;&gt;yamllint&lt;/a&gt;来保证自己的yaml语法正确&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;修改全局配置文件&#34;&gt;修改全局配置文件&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此段落引用自&lt;a href=&#34;http://hexo.io/zh-cn/docs/configuration.html&#34;&gt;Hexo官方文档&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;您可以在 &lt;code&gt;_config.yml&lt;/code&gt; 中修改大部份的配置。&lt;/p&gt;
&lt;h3 id=&#34;网站&#34;&gt;网站&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;subtitle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站副标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;您的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;language&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站使用的语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站时区。Hexo 默认使用您电脑的时区。&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;时区列表&lt;/a&gt;。比如说：&lt;code&gt;America/New_York&lt;/code&gt;, &lt;code&gt;Japan&lt;/code&gt;, 和 &lt;code&gt;UTC&lt;/code&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;网址&#34;&gt;网址&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;网站根目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;permalink&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文章的 &lt;a href=&#34;permalinks.html&#34;&gt;永久链接&lt;/a&gt; 格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;permalink_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;永久链接中各部分的默认值&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您的网站存放在子目录中，例如 &lt;code&gt;http://yoursite.com/blog&lt;/code&gt;，则请将您的 &lt;code&gt;url&lt;/code&gt; 设为 &lt;code&gt;http://yoursite.com/blog&lt;/code&gt; 并把 &lt;code&gt;root&lt;/code&gt; 设为 &lt;code&gt;/blog/&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;source_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;资源文件夹，这个文件夹用来存放内容。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;public_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;公共文件夹，这个文件夹用于存放生成的站点文件。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;public&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标签文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;archive_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;归档文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;archives&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分类文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;categories&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;code_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Include code 文件夹&lt;/td&gt;
&lt;td&gt;`downloads/code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i18n_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;国际化（i18n）文件夹&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:lang&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skip_render&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;跳过指定文件的渲染，您可使用 &lt;a href=&#34;https://github.com/isaacs/node-glob&#34;&gt;glob 表达式&lt;/a&gt;来匹配路径。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;文章&#34;&gt;文章&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;new_post_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新文章的文件名称&lt;/td&gt;
&lt;td&gt;:title.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_layout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;预设布局&lt;/td&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto_spacing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在中文和英文之间加入空格&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;titlecase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把标题转换为 title case&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;external_link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在新标签中打开链接&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filename_case&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把文件名称转换为 (1) 小写或 (2) 大写&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;render_drafts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示草稿&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;post_asset_folder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;启动 &lt;a href=&#34;asset-folders.html&#34;&gt;Asset 文件夹&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;relative_link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把链接改为与根目录的相对位址&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;future&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示未来的文章&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代码块的设置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分类-标签&#34;&gt;分类 &amp;amp; 标签&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认分类&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uncategorized&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分类别名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标签别名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;日期-时间格式&#34;&gt;日期 / 时间格式&lt;/h3&gt;
&lt;p&gt;Hexo 使用 &lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt; 来解析和显示时间。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日期格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;MMM D YYYY&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;时间格式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;H:mm:ss&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分页&#34;&gt;分页&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;per_page&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每页显示的文章量 (0 = 关闭分页功能)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pagination_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分页目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;page&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;扩展&#34;&gt;扩展&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前主题名称。值为&lt;code&gt;false&lt;/code&gt;时禁用主题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部署部分的设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;配置deployment&#34;&gt;配置Deployment&lt;/h2&gt;
&lt;p&gt;首先，你需要为自己配置身份信息，打开命令行，然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;yourname&amp;quot;
git config --global user.email &amp;quot;youremail&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样在&lt;code&gt;_config.yml&lt;/code&gt;文件中，找到&lt;code&gt;Deployment&lt;/code&gt;，然后按照如下修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
type: git
repo: git@github.com:yourname/yourname.github.io.git
branch: master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用git方式进行部署，执行&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;来安装所需的插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后在当前目录打开命令行，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。
然后通过&lt;a href=&#34;http://yourname.github.io/来访问自己刚刚上传的网站。&#34;&gt;http://yourname.github.io/来访问自己刚刚上传的网站。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;添加新文章&#34;&gt;添加新文章&lt;/h2&gt;
&lt;p&gt;打开Hexo目录下的&lt;code&gt;source&lt;/code&gt;文件夹，所有的文章都会以md形式保存在&lt;code&gt;_post&lt;/code&gt;文件夹中，只要在&lt;code&gt;_post&lt;/code&gt;文件夹中新建md类型的文档，就能在执行&lt;code&gt;hexo g&lt;/code&gt;的时候被渲染。
新建的文章头需要添加一些yml信息，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: hello-world //在此处添加你的标题。
date: 2014-11-7 08:55:29 //在此处输入你编辑这篇文章的时间。
categories: Code //在此处输入这篇文章的分类。
toc: true //在此处设定是否开启目录，需要主题支持。
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;进阶&#34;&gt;进阶&lt;/h1&gt;
&lt;p&gt;如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。&lt;/p&gt;
&lt;h2 id=&#34;更换主题&#34;&gt;更换主题&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;可以在&lt;a href=&#34;https://github.com/hexojs/hexo/wiki/Themes&#34;&gt;此处&lt;/a&gt;寻找自己喜欢的主题&lt;/em&gt;
下载所有的主题文件，保存到Hexo目录下的&lt;code&gt;themes&lt;/code&gt;文件夹下。然后在&lt;code&gt;_config.yml&lt;/code&gt;文件中修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Extensions
## Plugins: http://hexo.io/plugins/
## Themes: http://hexo.io/themes/
theme: landscape //themes文件夹中对应文件夹的名称
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后先执行&lt;code&gt;hexo clean&lt;/code&gt;，然后重新&lt;code&gt;hexo g&lt;/code&gt;，并且&lt;code&gt;hexo d&lt;/code&gt;，很快就能看到新主题的效果了~&lt;/p&gt;
&lt;h2 id=&#34;更换域名&#34;&gt;更换域名&lt;/h2&gt;
&lt;p&gt;首先，需要注册一个域名。在中国的话，&lt;code&gt;.cn&lt;/code&gt;全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;godaddy&lt;/a&gt;或&lt;a href=&#34;http://www.xinnet.com/&#34;&gt;新网&lt;/a&gt;或&lt;a href=&#34;http://www.xinnet.com/&#34;&gt;万网&lt;/a&gt;中的任意一家，自己权衡价格即可。
然后，我们需要配置一下域名解析。推荐使用DNSPod的服务，比较稳定，解析速度比较快。在域名注册商出修改NS服务器地址为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f1g1ns1.dnspod.net
f1g1ns2.dnspod.net
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以新网为例，首先点击域名管理进入管理页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-setting.png&#34; alt=&#34;点击域名管理&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后点击域名后面的&lt;code&gt;管理&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/mydomin.png&#34; alt=&#34;管理&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入域名管理的操作界面，点击&lt;code&gt;域名管理&lt;/code&gt;，来到域名管理界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-config.png&#34; alt=&#34;终于来到了域名管理= =&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;修改域名DNS&lt;/code&gt;，然后选择&lt;code&gt;填写具体信息&lt;/code&gt;，在下面的空框中填入DNSPod的NS服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/domin-dnspod.png&#34; alt=&#34;使用DNSPod的服务器&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我们进入DNSPod的界面，开始真正进入域名解析的配置= =。在DNSPod中，首先添加域名，然后分别添加如下条目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/dnspod-setting.png&#34; alt=&#34;配置DNS解析&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后，我们对Github进行一下配置。&lt;/p&gt;
&lt;p&gt;在自己本地的hexo目录下的&lt;code&gt;source&lt;/code&gt;文件夹中，新建一个&lt;code&gt;CNAME&lt;/code&gt;文件*（注意，没有后缀名。）*，内容为&lt;code&gt;yourdomin.xxx&lt;/code&gt;。然后再执行一下&lt;code&gt;hexo d -g&lt;/code&gt;，重新上传自己的博客。
在github中打开你自己的库，进入库的setting界面，如果看到了如下提示，说明配置成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-domin.png&#34; alt=&#34;Github-pages绑定自定义域名&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在这一系列的操作中，包括修改NS服务器，设置A解析等等，都需要一定的时间。短则10分钟，长则24小时，最长不会超过72小时。如果超过72小时，请检查自己的配置过程，或者修改自己本地的DNS服务器。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年03月26日 完成了基础架构，慢慢添加进阶技巧= =。&lt;/li&gt;
&lt;li&gt;2015年03月31日 添加了CNAME的相关内容。&lt;/li&gt;
&lt;li&gt;2015年04月30日 修复了错误的git命令。&lt;/li&gt;
&lt;li&gt;2015年06月11日 更新了&lt;code&gt;.config_yml&lt;/code&gt;配置&lt;/li&gt;
&lt;li&gt;2015年10月12日 完善了Deployment部分操作，添加了yaml语法检测网址&lt;/li&gt;
&lt;li&gt;2015年12月09日 更新软件版本，为Hexo 3.2做准备&lt;/li&gt;
&lt;li&gt;2016年11月06日 修复Typo on Jekyll&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Github SSH Key以免去Hexo部署时输入密码</title><link>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</link><pubDate>Sat, 07 Feb 2015 14:40:16 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</guid><description>&lt;p&gt;原文本来放在&lt;a href=&#34;http://xuanwo.io/2014/08/14/hexo-usual-problem/&#34;&gt;Hexo常见问题解决方案&lt;/a&gt;之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。&lt;/p&gt;
&lt;h1 id=&#34;操作&#34;&gt;操作&lt;/h1&gt;
&lt;h2 id=&#34;修改-config-yml&#34;&gt;修改_config.yml&lt;/h2&gt;
&lt;p&gt;将_config.yml的git信息修改为SSH形式。&lt;/p&gt;
&lt;h2 id=&#34;列出已存在的ssh-key&#34;&gt;列出已存在的SSH Key&lt;/h2&gt;
&lt;p&gt;打开Git Bash，并且输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令会列出你&lt;code&gt;.ssh&lt;/code&gt;账户中已经存在的SSH key，如果之前没有设置过，一般都是没有。&lt;/p&gt;
&lt;h2 id=&#34;生成密钥&#34;&gt;生成密钥&lt;/h2&gt;
&lt;p&gt;然后输入：
&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;&lt;/code&gt;
这个命令将会生成一个以&lt;code&gt;your_email@example.com&lt;/code&gt;为标签的ssh key，然后bash中会显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接回车，然后出现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为追求操作方便，我们不打算在deploy的时候输入这个&lt;code&gt;passphrase&lt;/code&gt;，所以直接回车两次设为空。然后你会看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your identification has been saved in ~/.ssh/id_rsa.
Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;加入ssh-agent&#34;&gt;加入SSH Agent&lt;/h2&gt;
&lt;p&gt;下一步输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-agent -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果出现类似&lt;code&gt;Agent pid XXXX&lt;/code&gt;这样的字样，则跳过下一步，否则输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval `ssh-agent -s`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直到出现&lt;code&gt;Agent pid XXXX&lt;/code&gt;这样的提示之后，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，你成功的在本地生成了一个可用的SSH key。&lt;/p&gt;
&lt;h2 id=&#34;将ssh-key添加到github中&#34;&gt;将SSH Key添加到Github中&lt;/h2&gt;
&lt;p&gt;下面将这个key添加到github网站。
打开&lt;a href=&#34;https://github.com/settings/ssh&#34;&gt;https://github.com/settings/ssh&lt;/a&gt;，点击&lt;code&gt;Add SSH Key&lt;/code&gt;，复制&lt;code&gt;id_rsa.pub&lt;/code&gt;中的所有内容到&lt;code&gt;Key&lt;/code&gt;框中，在&lt;code&gt;Title&lt;/code&gt;框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。
当网页显示添加成功后，就已经完成了全部的操作。
下面进行一些测试，同样是打开Git Bash，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bash中会显示如下字样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入yes之后，计算机会自动将&lt;code&gt;github.com&lt;/code&gt;列入已知的host，然后会出现如下提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi username! You&#39;ve successfully authenticated, but GitHub does not
provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果成功看见，说明你已经配置好了，快去享受爽快的hexo一键部署吧；
如果出现任何错误提示，请仔细检查自己的操作，或者将错误信息发给我。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年02月07日 独立成篇&lt;/li&gt;
&lt;li&gt;2015年02月16日 补充&lt;code&gt;_config.yml&lt;/code&gt;的修改&lt;/li&gt;
&lt;li&gt;2015年03月22日 修复了一处代码显示BUG&lt;/li&gt;
&lt;li&gt;2016年04月07日 修复了部分代码格式问题&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用Travis CI自动部署Hexo</title><link>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</link><pubDate>Sat, 07 Feb 2015 14:00:51 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</guid><description>&lt;p&gt;前两天了解到了一个有趣的概念叫持续集成：
&amp;gt; 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。
然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？&lt;/p&gt;
&lt;p&gt;在这样的指导思想下，我完成了上一篇文章：&lt;a href=&#34;https://xuanwo.io/2015/02/05/VPS-Hexo-Autodeploy/&#34;&gt;VPS搭配Github Webhook实现Hexo自动发布&lt;/a&gt;，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。&lt;/p&gt;
&lt;h1 id=&#34;好处&#34;&gt;好处&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行&lt;code&gt;hexo d -g&lt;/code&gt;的麻烦，更不必说文章增多之后渲染时间还会增长。&lt;/li&gt;
&lt;li&gt;稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用&lt;code&gt;Travis CI&lt;/code&gt;，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。&lt;/li&gt;
&lt;li&gt;快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~&lt;/li&gt;
&lt;li&gt;协作：博客的构建完全交由&lt;code&gt;Travis CI&lt;/code&gt;进行，所以完全可以通过&lt;code&gt;Hexo&lt;/code&gt;+&lt;code&gt;git&lt;/code&gt;构建一个多人协作的博客平台。实际上，Hexo的&lt;a href=&#34;https://hexo.io/&#34;&gt;官网&lt;/a&gt;正是这样构建的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;travis-ci介绍&#34;&gt;Travis CI介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。
它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。
2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是几个特性：
- 只支持Github
- 支持JavaScript
- 开源，免费&lt;/p&gt;
&lt;p&gt;然后介绍一下它的原理：
Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行&lt;code&gt;sudo&lt;/code&gt;来进行&lt;code&gt;apt-get install&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;travis-ci配置&#34;&gt;Travis CI配置&lt;/h1&gt;
&lt;p&gt;我们知道，Hexo的命令非常简单，一个&lt;code&gt;hexo d -g&lt;/code&gt;就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感谢Hexo作者&lt;a href=&#34;http://zespia.tw/&#34;&gt;tommy351&lt;/a&gt;提供的操作流程，原文可见于&lt;a href=&#34;http://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/&#34;&gt;用 Travis CI 自動部署網站到 GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;生成ssh-key&#34;&gt;生成SSH Key&lt;/h2&gt;
&lt;p&gt;参见&lt;a href=&#34;http://xuanwo.io/2015/02/07/generate-a-ssh-key/&#34;&gt;使用Github SSH Key以免去Hexo部署时输入密码&lt;/a&gt;
需要注意的是，这个SSH key不应成为你账号的全局SSH key*（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）*，而应该添加至&lt;a href=&#34;https://github.com/username/ropename/settings/keys&#34;&gt;https://github.com/username/ropename/settings/keys&lt;/a&gt; ，这样，你就控制了Travis CI的权限。&lt;/p&gt;
&lt;h2 id=&#34;加密私钥&#34;&gt;加密私钥&lt;/h2&gt;
&lt;p&gt;下面的操作需要事先配置好gem环境，如果没有可以尝试使用&lt;a href=&#34;http://xuanwo.io/2014/08/07/Cloud9/&#34;&gt;强大且配置项丰富的在线IDE应用——Cloud9&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;安装travis-ci的命令行工具&#34;&gt;安装Travis CI的命令行工具&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;登陆travis-ci&#34;&gt;登陆Travis CI&lt;/h3&gt;
&lt;p&gt;需要输入Github账号和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;travis login --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;加密私钥并上传至travis&#34;&gt;加密私钥并上传至Travis&lt;/h3&gt;
&lt;p&gt;正确生成后你会得到两个文件，一个叫&lt;code&gt;ssh_key&lt;/code&gt;，一个叫&lt;code&gt;ssh_key.pub&lt;/code&gt;。刚才我们将&lt;code&gt;ssh_key.pub&lt;/code&gt;添加到了github，下面我们要加密&lt;code&gt;ssh_key&lt;/code&gt;这个私钥并且上传到Travis。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;travis encrypt-file ssh_key --add
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后Travis的客户端会自动检测当前目录中的git信息，并且添加到&lt;code&gt;.travis.yml&lt;/code&gt;中去。在进行此步操作前，目录下要先存在&lt;code&gt;.travis.yml&lt;/code&gt;文件，否则会报错。&lt;/p&gt;
&lt;h3 id=&#34;指定ssh设置&#34;&gt;指定SSH设置&lt;/h3&gt;
&lt;p&gt;在当前目录下新建文件&lt;code&gt;ssh_config&lt;/code&gt;，内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host github.com
User git
StrictHostKeyChecking no
IdentityFile ~/.ssh/id_rsa
IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- openssl aes-256-cbc -K $encrypted_xxxxxxxxxx_key -iv $encrypted_xxxxxxxxxx_iv
-in travis.enc -out ~/.ssh/id_rsa -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改目录权限&#34;&gt;修改目录权限&lt;/h3&gt;
&lt;p&gt;紧跟那条解密指令，换行输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- chmod 600 ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意yml格式，短杠后面的空格不能省略。&lt;/p&gt;
&lt;h3 id=&#34;将密钥加入系统&#34;&gt;将密钥加入系统&lt;/h3&gt;
&lt;p&gt;紧跟上一步操作，换行输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- eval $(ssh-agent)
- ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改git信息&#34;&gt;修改git信息&lt;/h3&gt;
&lt;p&gt;将之前创建的ssh_config复制到Travis的虚拟机中去，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- cp ssh_config ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后指定git使用者信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- git config --global user.name &amp;quot;username&amp;quot;
- git config --global user.email username@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;build配置&#34;&gt;Build配置&lt;/h2&gt;
&lt;p&gt;之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。
之前我们用到了一个名为&lt;code&gt;.travis.yml&lt;/code&gt;的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。&lt;/p&gt;
&lt;h3 id=&#34;指定环境&#34;&gt;指定环境&lt;/h3&gt;
&lt;p&gt;在文件中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;language: node_js
node_js:
- &#39;0.10&#39; //指定使用node.js最新的稳定版0.10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;指定分支&#34;&gt;指定分支&lt;/h3&gt;
&lt;p&gt;在文件中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;branches:
only:
- blog //这个分支应当使用自己的源文件分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。&lt;/p&gt;
&lt;h3 id=&#34;hexo配置&#34;&gt;Hexo配置&lt;/h3&gt;
&lt;p&gt;首先在虚拟机中安装Hexo：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install:
- npm install hexo-cli -g
- npm install hexo --save
- npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行Hexo的渲染操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script:
- hexo clean //分开写，方便调试可能出现的错误
- hexo d
- hexo g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里，你的Travis CI的持续集成已经配置完毕了，最后的&lt;code&gt;.travis.yml&lt;/code&gt;文件内容可以参考如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;branches:
only:
- blog
language: node_js
sudo: false
node_js:
- &#39;0.12&#39;
before_install:
- openssl aes-256-cbc -K $encrypted_xxxxxxxxx_key -iv $encrypted_xxxxxxx_iv
-in doc/travis.enc -out ~/.ssh/id_rsa -d
- chmod 600 ~/.ssh/id_rsa
- eval $(ssh-agent)
- ssh-add ~/.ssh/id_rsa
- cp doc/ssh_config ~/.ssh/config
- git config --global user.name &amp;quot;yourname&amp;quot;
- git config --global user.email youremail
- git clone -b master git@github.com:yourname/yourrepo.git .deploy_git
install:
- npm install hexo-cli -g
- npm install
- npm install hexo-generator-feed --save
- npm install hexo-generator-sitemap --save
- npm install hexo-deployer-git --save
script:
- hexo clean
- hexo g
- hexo d
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年02月07日 首次发布，感谢Tommy351&lt;/li&gt;
&lt;li&gt;2015年02月16日 跟随Hexo版本更新，修改了相关代码。&lt;/li&gt;
&lt;li&gt;2015年03月22日 Hexo3.0稳定版发布，修改相关代码，并修复部分显示问题。&lt;/li&gt;
&lt;li&gt;2015年04月01日 因为自己的.travis.yml有大幅度修改，所以重新添加了相关代码，避免产生困扰。&lt;/li&gt;
&lt;li&gt;2015年10月23日 修复部分错字，更新了.travis.yml&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>VPS搭配Github Webhook实现Hexo自动发布</title><link>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</link><pubDate>Thu, 05 Feb 2015 23:22:30 +0000</pubDate><guid>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</guid><description>&lt;p&gt;自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。&lt;/p&gt;
&lt;h1 id=&#34;配置nginx&#34;&gt;配置Nginx&lt;/h1&gt;
&lt;h2 id=&#34;安装nginx&#34;&gt;安装Nginx&lt;/h2&gt;
&lt;p&gt;使用apt-get程序来安装nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
apt-get update
apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中访问&lt;a href=&#34;http://your-ip-address&#34;&gt;http://your-ip-address&lt;/a&gt; or domain/， 如果看到&lt;code&gt;Welcome to nginx!&lt;/code&gt;字样，说明Nginx已经安装成功了。&lt;/p&gt;
&lt;h2 id=&#34;配置nginx-1&#34;&gt;配置Nginx&lt;/h2&gt;
&lt;p&gt;修改&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;文件，在&lt;code&gt;serve&lt;/code&gt;的框里面的空行中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
location /update {
proxy_pass http://127.0.0.1:1111;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样设置之后&lt;code&gt;http://your-ip-address or domain/update&lt;/code&gt;访问就会被重定向到1111端口。&lt;/p&gt;
&lt;h2 id=&#34;重启nginx&#34;&gt;重启Nginx&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;/etc/init.d/nginx restart&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置git&#34;&gt;配置Git&lt;/h1&gt;
&lt;h2 id=&#34;安装git&#34;&gt;安装Git&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;apt-get install git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载自己的代码库&#34;&gt;下载自己的代码库&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;git clone yourgit yourdir&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置python&#34;&gt;配置Python&lt;/h1&gt;
&lt;h2 id=&#34;安装python环境&#34;&gt;安装Python环境&lt;/h2&gt;
&lt;p&gt;输入：
&lt;code&gt;apt-get install python-pip&lt;/code&gt;
然后系统会自动完成相关的配置。&lt;/p&gt;
&lt;h2 id=&#34;编辑python文件&#34;&gt;编辑Python文件&lt;/h2&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
cd ~/yourdir
vi hook.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在打开的vim界面中，点击一下&lt;code&gt;i&lt;/code&gt;，进入insert模式，然后粘贴以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python3
#-*- coding:utf-8 -*-
# start a python service and watch the nginx request dog
from http.server import HTTPServer,CGIHTTPRequestHandler
from threading import Thread,RLock
import subprocess
import logging
import sys
import os.path
_PWD=os.path.abspath(os.path.dirname(__file__))
def execute_cmd(args,cwd=None,timeout=30):
if isinstance(args,str): args = [args]
try:
with subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) as proc:
try:
output,unused_err = proc.communicate(timeout=timeout)
except:
proc.kill()
raise
retcode = proc.poll()
if retcode:
raise subprocess.CalledProcessError(retcode, proc.args, output=output)
return output.decode(&#39;utf-8&#39;,&#39;ignore&#39;) if output else &#39;&#39;
except Exception as ex:
logging.error(&#39;EXECUTE_CMD_ERROR: %s&#39;,&#39; &#39;.join(str(x) for x in args))
raise ex
class HttpHandler(CGIHTTPRequestHandler):
_lock = RLock()
_counter = 0
_building = False
def build(self):
with HttpHandler._lock:
if HttpHandler._counter == 0 or HttpHandler._building:
return
HttpHandler._counter = 0
HttpHandler._building = True
logging.info(&amp;quot;BUILDING NOW...&amp;quot;)
try:
resp = execute_cmd(os.path.join(_PWD,&#39;build.sh&#39;),cwd=_PWD,timeout=600)
logging.info(resp)
finally:
HttpHandler._building = False
self.build()
def do_GET(self):
self.do_POST()
def do_POST(self):
self.send_response(200,&#39;OK&#39;)
self.end_headers()
self.wfile.write(b&#39;OK&#39;)
self.wfile.flush()
with HttpHandler._lock:
HttpHandler._counter += 1
Thread(target=self.build).start()
if __name__ == &#39;__main__&#39;:
logging.basicConfig(format=&#39;%(asctime)s %(levelname)s: %(message)s&#39;,level=logging.INFO)
port = int(sys.argv[1]) if len(sys.argv) &amp;gt; 1 else 1111
logging.info(&#39;starting the server at 127.0.0.1:%s&#39;,port)
httpd = HTTPServer((&#39;127.0.0.1&#39;,port),HttpHandler)
httpd.serve_forever()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，输入&lt;code&gt;:wq&lt;/code&gt;退出vi。&lt;/p&gt;
&lt;h1 id=&#34;编辑sh文件&#34;&gt;编辑sh文件&lt;/h1&gt;
&lt;p&gt;切换到yourdir，然后输入：
&lt;code&gt;vi build.sh&lt;/code&gt;
在打开的vi界面中，点击&lt;code&gt;i&lt;/code&gt;进入编辑模式，然后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/bin/bash
echo &amp;quot;build at `date`&amp;quot;
. ~/.nvm/nvm.sh
nvm use 0.10.36
cd ~/xuanwo
git pull
hexo clean
hexo d -g
echo &amp;quot;built successfully&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，输入&lt;code&gt;:wq&lt;/code&gt;退出vi。&lt;/p&gt;
&lt;h1 id=&#34;后台运行python脚本进行监视&#34;&gt;后台运行Python脚本进行监视&lt;/h1&gt;
&lt;p&gt;运行：
&lt;code&gt;nohup python3 ~/xuanwo/hook.py &amp;gt;&amp;gt; /tmp/hook.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;
&lt;strong&gt;每次重启VPS后，貌似都需要运行一次&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年2月6日 首次发布&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Hexo常见问题解决方案</title><link>https://xuanwo.io/2014/08/14/hexo-usual-problem/</link><pubDate>Thu, 14 Aug 2014 05:20:00 +0000</pubDate><guid>https://xuanwo.io/2014/08/14/hexo-usual-problem/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;Hexo是一个非常好用的静态博客生成器，但是由于很多方面的原因，导致在使用过程中经常出现错误。这些错误中，有些是因为自己的设置不当，导致程序报错；有些是因为版本更迭，导致原有的设置失效；而有些，则是Hexo程序本身的BUG。
本文旨在尽可能的解决前两类问题，缓解Hexo项目大量重复issues的现象。当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/pulls&#34;&gt;提交PR&lt;/a&gt;，&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/issues&#34;&gt;发布issues&lt;/a&gt;或者在下方评论等形式参与到本文档的编辑中来。
同时，也希望有能力的人可以将本文档翻译成英文，以帮助到更多的人。
浏览时，使用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索关键词或使用目录来定位问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文欢迎转载，但是恳请保留贡献者信息，谢谢。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;常见错误&#34;&gt;常见错误&lt;/h1&gt;
&lt;h2 id=&#34;本地浏览没问题-deploy报错&#34;&gt;本地浏览没问题，Deploy报错&lt;/h2&gt;
&lt;h3 id=&#34;git环境配置错误&#34;&gt;Git环境配置错误&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;*Windows系统*出现报错信息如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[info] Start deploying: git
[info] Setting up Git deployment...
[error] Error: spawn ENOENT
Error: spawn ENOENT
at errnoException (child_process.js:1000:11)
at Process.ChildProcess._handle.onexit (child_process.js:791:34)
events.js:72
throw er; // Unhandled &#39;error&#39; event
^
Error: spawn ENOENT
at errnoException (child_process.js:1000:11)
at Process.ChildProcess._handle.onexit (child_process.js:791:34)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检查Git的相关配置，将git所在目录添加到系统path中去。&lt;/p&gt;
&lt;h3 id=&#34;deploy设置错误&#34;&gt;Deploy设置错误&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;hexo deploy&lt;/code&gt;后，出现错误信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&#39;github&#39; does not appear to be a git repository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查&lt;code&gt;_config.yml&lt;/code&gt;中deploy设置。参见&lt;a href=&#34;http://hexo.io/docs/deployment.html&#34;&gt;http://hexo.io/docs/deployment.html&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;.deploy_git&lt;/code&gt;文件夹并且执行&lt;code&gt;hexo clean&lt;/code&gt;后，重新&lt;code&gt;hexo deploy&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deploy之后-页面长时间404&#34;&gt;Deploy之后，页面长时间404&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Github-404.png&#34; alt=&#34;Github 404 孩子不哭&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;检查github-pages类型&#34;&gt;检查Github Pages类型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;个人主页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是库的名称为&lt;code&gt;yourname.github.io&lt;/code&gt;的主页，页面文件应当在master分支下，文件结构可以参考&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/tree/master&#34;&gt;我的主页&lt;/a&gt;，也就是应当以HTML文件为主，是没有Markdown文件的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目主页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是库名不是&lt;code&gt;yourname.github.io&lt;/code&gt;的主页，页面文件应当在&lt;code&gt;gh-pages&lt;/code&gt;分支下，文件结构与个人主页基本一致，同样没有Markdown文件。&lt;/p&gt;
&lt;h3 id=&#34;检查github验证邮件&#34;&gt;检查Github验证邮件&lt;/h3&gt;
&lt;p&gt;曾经出现过所有操作都没有问题但就是404的状况，新创建的用户最好都去看看是不是验证邮件没有通过。&lt;/p&gt;
&lt;h3 id=&#34;注意库的名字&#34;&gt;注意库的名字&lt;/h3&gt;
&lt;p&gt;现在大多改成&lt;code&gt;.io&lt;/code&gt;结尾域名了，但是不确定是不是真的跟这个有关，最好改成&lt;code&gt;.io&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;自有域名二级目录无法访问&#34;&gt;自有域名二级目录无法访问&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;
&lt;a href=&#34;https://github.com/hexojs/hexo/issues/820&#34;&gt;参见issue820&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题出在CNAME跳转，下面附上我的分析，如果不感兴趣可以直接翻到解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有CNAME跳转，访问&lt;code&gt;yourname.github.io/repo&lt;/code&gt;会自动地去访问gh-pages分支下的静态文件。
但是一旦进行了CNAME跳转，访问&lt;code&gt;yourname.github.io/repo&lt;/code&gt;就会自动跳转为&lt;code&gt;yoursite.com/repo&lt;/code&gt;，显然在你的博客目录下是没有这个文件夹的，所以自然而然的会出现访问404错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;增加一个新的DNS记录&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;修改自己域名的DNS记录，增加一条记录（A记录或者CNAME都可以，指向github），内容是&lt;code&gt;repo.yoursite.com&lt;/code&gt;，访问时通过&lt;code&gt;repo.yoursite.com&lt;/code&gt;来访问。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;将这个库移动到博客目录下&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;按照上述的分析，把这个库的repo移动至博客目录下即可。注意修改html以免被hexo再次渲染，还有如果是直接复制或者clone，注意删除隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;h2 id=&#34;hexo命令失效&#34;&gt;Hexo命令失效&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入命令后出现如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
localhost:~ apple$ hexo new &amp;quot;title&amp;quot;
Usage: hexo
Commands:
help Get help on a command
init Create a new Hexo folder
migrate Migrate your site from other system to Hexo
version Display version information
Global Options:
--debug Display all verbose messages in the terminal
--safe Disable all plugins and scripts
For more help, you can use hexo help [command] for the detailed information
or you can check the docs: http://zespia.tw/hexo/docs/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查&lt;code&gt;_config.yml&lt;/code&gt;中的内容，特别注意&lt;code&gt;:&lt;/code&gt;后面需要有一个空格。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查`package.json&amp;rsquo;中的内容，注意添加hexo信息用来标识这是一个hexo目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
{
&amp;quot;hexo&amp;quot;: {
&amp;quot;version&amp;quot;: &amp;quot;&amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果还是有问题，可以更新hexo之后，在新的文件夹中重新进行&lt;code&gt;hexo init&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hexo所有命令报错&#34;&gt;Hexo所有命令报错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/832&#34;&gt;参见Issues&lt;/a&gt;
报错信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[error] { name: &#39;HexoError&#39;,
reason: &#39;end of the stream or a document separator is expected&#39;,
mark:
{ name: null,
buffer: &#39;# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site\ntitle: 2hu\nsubtitle:\ndescription: 2hu\nauthor: @2hu10n92hen9\nemail:\nlanguage:\n\n# URL\n## If your site is put in a subdirectory, set url as \&#39;http://yoursite.com/child\&#39; and root as \&#39;/child/\&#39;\nurl: http://2hu.me\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Directory\nsource_dir: source\npublic_dir: public\n\n# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nhighlight:\n enable: true\n line_number: true\n tab_replace:\n\n# Category &amp;amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 2\ncategory: 2\ntag: 2\n\n# Server\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nserver_ip: 0.0.0.0\nlogger: false\nlogger_format:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Disqus\ndisqus_shortname: 2hu\n\n# Extensions\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: strict\nexclude_generator:\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n type: github\n repository: https://github.com/zhulongzheng/zhulongzheng.github.io.git\n branch: master\n\u0000&#39;,
position: 168,
line: 8,
column: 8 },
message: &#39;Config file load failed&#39;,
domain:
{ domain: null,
_events: { error: [Function] },
_maxListeners: 10,
members: [ [Object] ] },
domainThrown: true,
stack: undefined }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;
仔细检查&lt;code&gt;_config.yml&lt;/code&gt;文件中所有冒号后面的空格，格式很严格，必须是&lt;strong&gt;只有一个&lt;/strong&gt;，&lt;strong&gt;半角&lt;/strong&gt;。不管是多了还是少了都会报错，这是yml解释器所定义的语法。如果不确定的话，将输入法调整到英文模式，删除所有冒号后面的空格重新输入，不要使用Tab。&lt;/p&gt;
&lt;h2 id=&#34;更新至2-8-x版本后-构建失败&#34;&gt;更新至2.8.X版本后，构建失败&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
输入&lt;code&gt;hexo g&lt;/code&gt;后，报错如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[error] { name: &#39;HexoError&#39;,
reason: &#39;incomplete explicit mapping pair; a key node is missed&#39;,
mark:
{ name: null,
buffer: &#39;categories: Categories\nsearch: Search\ntags: Tags\ntagcloud: Tag Cloud\ntweets: Tweets\nprev: Prev\nnext:
Next\ncomment: Comments\narchive_a: Archives\narchive_b: Archives: %s\npage: Page %d\nrecent_posts: Recent Posts\ndescr
iption: Description\nread_more: Read More\n\u0000&#39;,
position: 163,
line: 9,
column: 19 },
message: &#39;Process failed: languages/default.yml&#39;,
domain:
{ domain: null,
_events: { error: [Function] },
_maxListeners: 10,
members: [ [Object] ] },
domainThrown: true,
stack: undefined }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主题目录下所有yml文件中所有有空格的字段都用双引号括起来，尤其注意languages下面的yml文件。
&lt;img src=&#34;https://xuanwo.io/imgs/opinion/hexo-languages-error.png&#34; alt=&#34;就像这样&#34; /&gt;
&lt;em&gt;感谢&lt;a href=&#34;https://github.com/dukewan&#34;&gt;@dukewan&lt;/a&gt;提供的截图&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改主题文件之后-网页不更新&#34;&gt;修改主题文件之后，网页不更新&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在修改主题文件之后，页面的文件依然没有更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo clean&lt;/code&gt;并且删除&lt;code&gt;.deploy_git&lt;/code&gt;文件夹之后，&lt;code&gt;hexo d -g&lt;/code&gt;。为了强制浏览器更新资源文件，可以采用&amp;rsquo;Ctrl+F5&amp;rsquo;来刷新。&lt;/p&gt;
&lt;h2 id=&#34;页面没有渲染-partial转义失败&#34;&gt;页面没有渲染（partial转义失败）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/838&#34;&gt;参见Issues&lt;/a&gt;
看不到渲染后的页面，只能看到类似如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;%- partial(&#39;_partial/head&#39;) %&amp;gt;
&amp;lt;%- partial(&#39;_partial/header&#39;, null, {cache: !config.relative_link}) %&amp;gt;
&amp;lt;%- body %&amp;gt;
&amp;lt;% if (theme.sidebar &amp;amp;&amp;amp; theme.sidebar !== &#39;bottom&#39;){ %&amp;gt; &amp;lt;%- partial(&#39;_partial/sidebar&#39;, null, {cache: !config.relative_link}) %&amp;gt; &amp;lt;% } %&amp;gt;
&amp;lt;%- partial(&#39;_partial/footer&#39;, null, {cache: !config.relative_link}) %&amp;gt;
&amp;lt;%- partial(&#39;_partial/mobile-nav&#39;, null, {cache: !config.relative_link}) %&amp;gt; &amp;lt;%- partial(&#39;_partial/after-footer&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在博客所在目录下执行&amp;rsquo;npm install&amp;rsquo;用以安装插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢&lt;a href=&#34;http://zespia.tw/&#34;&gt;@tommy351&lt;/a&gt;提供的解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;更新至3-0-0版本后-文件渲染时卡死&#34;&gt;更新至3.0.0版本后，文件渲染时卡死&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1137&#34;&gt;参见Issues&lt;/a&gt;
表现为文件不多，但是渲染非常缓慢，超过半个小时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题出在&lt;code&gt;Highlight.js&lt;/code&gt;在判断语言类型时，会因为&lt;code&gt;-&lt;/code&gt;这个符号导致卡死。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用代码块时，明确使用类型，或者全部使用&lt;code&gt;plain&lt;/code&gt;类型，如下：&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
plain
something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;h2 id=&#34;升级至hexo-3-0版本后-deploy报错&#34;&gt;升级至Hexo 3.0版本后，deploy报错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1013&#34;&gt;参见Issues&lt;/a&gt;
升级之后，本来可以deploy的设置出现报错，内容为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
ERROR Deployer not found: github
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;问题分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hexo3.0与以往版本最大的改变在于，更多的模块都从主程序中剥离了出来，其中就包括deploy的相关模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先需要安装对应的deploy模块，目前Hexo支持以下服务器的一键部署：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
git
heroku
rsync
openshift
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装命令为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
npm install hexo-deployer-git --save //将git替换为别的名字就可以安装对应模块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后对&lt;code&gt;_config.yml&lt;/code&gt;做如下设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
deploy:
type: git //非git请参考官方文档中的设置
repo: &amp;lt;repository url&amp;gt;
branch: [branch]
message: [message]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mac-os安装hexo出错&#34;&gt;Mac OS安装Hexo出错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hexojs/hexo/issues/1326&#34;&gt;参见Issues&lt;/a&gt;
命令行返回ERROR：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
{ [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用命令&lt;code&gt;npm install hexo --no-optional&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;常见问题&#34;&gt;常见问题&lt;/h1&gt;
&lt;h2 id=&#34;如何在不同电脑-系统-上使用hexo&#34;&gt;如何在不同电脑（系统）上使用Hexo&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;Git&lt;/code&gt;来管理自己的&lt;code&gt;Blog&lt;/code&gt;文件夹，需要注意一下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果主题是通过git管理的，需要将主题文件夹下的&lt;code&gt;.git&lt;/code&gt;文件夹删除或者使用git submodule的形式进行管理，才能同步Blog文件夹。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blog目录下自带的&lt;code&gt;.gitignore&lt;/code&gt;文件，&lt;code&gt;node_modules&lt;/code&gt;文件夹是不会同步的，所以同步之后需要自己再次进行&lt;code&gt;npm install&lt;/code&gt;，但是注意，不要进行&lt;code&gt;hexo init&lt;/code&gt;了，否则&lt;code&gt;_config.yml&lt;/code&gt;会被覆盖。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后看一下同步之后的目录结构：
&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/tree/blog&#34;&gt;https://github.com/Xuanwo/xuanwo.github.io/tree/blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用git-submodule来管理主题&#34;&gt;使用git submodule来管理主题&lt;/h2&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;h2 id=&#34;在主目录下添加-readme-md-文件或者html文件&#34;&gt;在主目录下添加&lt;code&gt;README.md&lt;/code&gt;文件或者html文件&lt;/h2&gt;
&lt;h3 id=&#34;hexo3-0以下使用&#34;&gt;Hexo3.0以下使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;感谢&lt;a href=&#34;http://timnew.me/&#34;&gt;@TimNew&lt;/a&gt;提供的思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如大家所知道的，在source文件夹下的所有md文件都会被hexo渲染成html文件，导致&lt;code&gt;README.md&lt;/code&gt;文件不能好好的放在里面了，即使是添加了&lt;code&gt;layout: false&lt;/code&gt;依然没有用。&lt;/p&gt;
&lt;p&gt;不过现在有一个另外的好办法，那就是利用主题的source目录，也就是&lt;code&gt;themes/themes-name/source&lt;/code&gt;。因为这个文件夹里面的所有文件都会被复制到网站的根目录中去，也就是说，如果在里面放上&lt;code&gt;README&lt;/code&gt;，就可以正常的存在于网站的主目录了。&lt;/p&gt;
&lt;p&gt;同样的，对于一些需要在网站下添加html文件的需求也可以这样来达成。比如百度或者谷歌在验证站长权限的时候，通常都会要求在主目录下添加一个html文件。同样的，只要把这个文件放在&lt;code&gt;themes/themes-name/source&lt;/code&gt;就可以搞定了。&lt;/p&gt;
&lt;h3 id=&#34;hexo3-0以上支持&#34;&gt;Hexo3.0以上支持&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;_config.yml&lt;/code&gt;下的&lt;code&gt;skip_render&lt;/code&gt;参数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip_render&lt;/code&gt;使用了&lt;a href=&#34;https://github.com/isaacs/minimatch&#34;&gt;&lt;code&gt;minimatch&lt;/code&gt;&lt;/a&gt;，开始匹配的位置是基于你的&lt;code&gt;source_dir&lt;/code&gt;的，一般来说，是你的&lt;code&gt;source&lt;/code&gt;文件夹下。下面我分别列举几种常见的情况进行说明：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;请注意yml中的文件格式，输入单个数据请注意空格，输入数组请进行缩进&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单个文件夹下全部文件：&lt;code&gt;skip_render: test/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单个文件夹下指定类型文件：&lt;code&gt;skip_render: test/*.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单个文件夹下全部文件以及子目录:&lt;code&gt;skip_render: test/**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个文件夹以及各种复杂情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
skip_render:
- `test1/*.html`
- `test2/**`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hexo版本回退&#34;&gt;Hexo版本回退&lt;/h2&gt;
&lt;p&gt;有时候更新之后发现新版本的Hexo不能按照预期的方式工作，这时候就需要使用版本回退功能。
打开命令行，输入&lt;code&gt;npm install -g hexo@版本号&lt;/code&gt;就可以回退到没有出现问题的版本上来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这个命令适用于所有Node.js模块&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;少数情况下会出现Node.js版本问题，可以使用&lt;code&gt;nvm install 版本号&lt;/code&gt;来安装报错信息中需要的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;推荐使用nvm来管理Node.js版本&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何为站点添加社会化评论&#34;&gt;如何为站点添加社会化评论&lt;/h2&gt;
&lt;h3 id=&#34;使用disque&#34;&gt;使用Disque&lt;/h3&gt;
&lt;p&gt;Hexo默认支持Disque，打开&lt;code&gt;_config.yml&lt;/code&gt;，在&lt;code&gt;disqus_shortname:&lt;/code&gt;后面输入自己的Disque账号。保存，重新渲染，清除缓存之后就能看到自己的评论窗口。&lt;/p&gt;
&lt;h3 id=&#34;使用duoshuo&#34;&gt;使用Duoshuo&lt;/h3&gt;
&lt;p&gt;部分主题添加了对多说的支持，只要输入Duoshuo账号，就可以看到效果了。如果主题不支持的话，就需要自己添加。需要对自己的主题结构有一定的了解，不是每一个主题都会有一样的文件，找不到同样的文件也正常，但是都会存在相同功能的区块，自己去定位即可。如果没把握的话，最后做好备份。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;after_footer.ejs&lt;/code&gt;模块中输入如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
var duoshuoQuery = {short_name:&amp;quot;yourshortname&amp;quot;};
(function() {
var ds = document.createElement(&#39;script&#39;);
ds.type = &#39;text/javascript&#39;;ds.async = true;
ds.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) + &#39;//static.duoshuo.com/embed.js&#39;;
ds.charset = &#39;UTF-8&#39;;
(document.getElementsByTagName(&#39;head&#39;)[0]
|| document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
})();
&amp;lt;/script&amp;gt;
&amp;lt;!-- 多说公共JS代码 end --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;article.ejs&lt;/code&gt;模块中输入如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;% if (page.comments){ %&amp;gt;
&amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;&amp;lt;%- page.path %&amp;gt;&amp;quot; data-title=&amp;lt;%- page.title %&amp;gt; data-url=&amp;lt;%- page.permalink %&amp;gt;&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;如何避免在deploy时输入密码&#34;&gt;如何避免在Deploy时输入密码&lt;/h2&gt;
&lt;h3 id=&#34;使用github客户端&#34;&gt;使用Github客户端&lt;/h3&gt;
&lt;p&gt;安装好Github客户端之后，使用Github客户端内置的Git Shell进行hexo的部署操作。&lt;/p&gt;
&lt;h3 id=&#34;自行生成ssh-key&#34;&gt;自行生成SSH key&lt;/h3&gt;
&lt;p&gt;使用Github客户端可以免去输入密码操作的原因就是客户端在本地生成了一个SSH key并且添加到了Github网站中。不喜欢使用Github客户端的童鞋可以参考下面的流程自行生成SSH key。
&lt;a href=&#34;http://xuanwo.io/2015/02/07/generate-a-ssh-key/&#34;&gt;使用Github SSH Key以免去Hexo部署时输入密码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;多git部署&#34;&gt;多git部署&lt;/h2&gt;
&lt;p&gt;参考&lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;hexo-deployer-git&lt;/a&gt;插件README进行配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
deploy:
type: git
message: [message]
repo:
github: &amp;lt;repository url&amp;gt;,[branch]
gitcafe: &amp;lt;repository url&amp;gt;,[branch]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意每一个冒号后面的空格，如果丢失会导致yml文件读取错误。&lt;/p&gt;
&lt;h2 id=&#34;开启全站https&#34;&gt;开启全站https&lt;/h2&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;h1 id=&#34;贡献者&#34;&gt;贡献者&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xuanwo.io/&#34;&gt;@Xuanwo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://timnew.me/&#34;&gt;@TimNew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zespia.tw/&#34;&gt;@tommy351&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2014年08月14日 完成大体框架，内容慢慢填充&lt;/li&gt;
&lt;li&gt;2014年08月23日 补充404问题，以及如何在不同电脑（系统）上使用Hexo&lt;/li&gt;
&lt;li&gt;2014年09月06日 新增自有域名二级目录无法访问，在主目录下添加md文件&lt;/li&gt;
&lt;li&gt;2014年09月09日 新增Hexo版本回退，Hexo所有命令报错。&lt;/li&gt;
&lt;li&gt;2014年09月23日 新增Partial没有转义&lt;/li&gt;
&lt;li&gt;2014年09月24日 新增添加社会化评论&lt;/li&gt;
&lt;li&gt;2015年02月06日 新增本地添加SSH key，修复部分笔误&lt;/li&gt;
&lt;li&gt;2015年02月07日 SSH key生成独立成篇&lt;/li&gt;
&lt;li&gt;2015年04月01日 添加了部分Hexo3.0带来的问题，新增了&lt;code&gt;skip_render&lt;/code&gt;参数设置&lt;/li&gt;
&lt;li&gt;2015年04月03日 添加了Hexo3.0中deploy设置&lt;/li&gt;
&lt;li&gt;2015年08月09日 添加了多git部署，Mac OS安装出错，更新了&lt;code&gt;skip_render&lt;/code&gt;参数设置以及部分文本说明&lt;/li&gt;
&lt;li&gt;2015年09月05日 添加了开启全站https以及主题管理，修复了代码显示BUG，删除了部分口水话&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>