<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Read on Xuanwo&#39;s Blog</title><link>https://xuanwo.io/tags/read/</link><description>Recent content in Read on Xuanwo&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 23 Dec 2015 16:15:20 +0000</lastBuildDate><atom:link href="https://xuanwo.io/tags/read/index.xml" rel="self" type="application/rss+xml"/><item><title>最佳跨平台PDF阅读解决方案</title><link>https://xuanwo.io/2015/12/23/best-pdf-read-solution/</link><pubDate>Wed, 23 Dec 2015 16:15:20 +0000</pubDate><guid>https://xuanwo.io/2015/12/23/best-pdf-read-solution/</guid><description>&lt;p&gt;最近因为学习需要，要大量阅读纯文字的PDF文档。然后我惊讶地发现市场上居然没有哪家提供一套完整可用的跨平台PDF阅读解决方案，于是我在尝试了市面几乎所有叫得上名字的各类阅读器之后，形成了一套自己的跨平台PDF阅读解决方案。本文记录了这套方案的详细内容，希望会有所益处。&lt;/p&gt;
&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;跨平台（目前支持Windows和Android）&lt;/li&gt;
&lt;li&gt;阅读记录同步&lt;/li&gt;
&lt;li&gt;支持标准PDF的批注和高亮等功能&lt;/li&gt;
&lt;li&gt;对PDF文件管理方便&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;思路&#34;&gt;思路&lt;/h1&gt;
&lt;p&gt;标准PDF的批注和高亮功能是内嵌在PDF文件中的，只要同步了PDF文件，也就同步了所有在PDF文件上的批注和高亮。因此这个问题很大程度上就变成了解决跨平台文件双向同步问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;跨平台双向同步在很多人看来是一个已经被Dropbox以及Google Drive解决了问题，但是实际上，它们在PC和移动端的行为是不一样的。PC端是完整的双向同步，而在移动端，为了节省流量和空间，它们都是提供了一个File list，你必须要自己下载指定文件。不仅如此，这个下载下来的文件大多是Read-Only的，用阅读器批注之后，你会发现这个文件无法保存，这样的话，PDF跨平台批注就无从谈起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;按照上面思路中的讨论，我在每一个平台上的解决方案都分成两个部分，第一是解决PDF阅读、批注问题，第二是解决PDF文件双向同步问题。&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;goodsync&#34;&gt;Goodsync&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/goodsync.png&#34; alt=&#34;Goodsync&#34; /&gt;
&lt;a href=&#34;http://www.goodsync.com/&#34;&gt;&lt;strong&gt;Goodsync&lt;/strong&gt;&lt;/a&gt;是一款非常强大的同步工具，我们通过它来提供本地到Google Drive的双向同步功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果通过SS艹墙，配置Google Drive时请勾选&lt;code&gt;基于WinInet&lt;/code&gt;，如图：&lt;img src=&#34;https://xuanwo.io/imgs/opinion/goodsync-proxy-setting.png&#34; alt=&#34;Goodsync Proxy Setting&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;foxit-reader&#34;&gt;Foxit Reader&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/foxit-reader.png&#34; alt=&#34;Foxit Reader&#34; /&gt;
&lt;a href=&#34;http://www.foxitsoftware.cn/&#34;&gt;&lt;strong&gt;Foxit Reader&lt;/strong&gt;&lt;/a&gt;，也就是福昕阅读器，不多说了，新版的界面还是可以的。（尽管我觉得颜值没有Adobe Reader DC高）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么不选Adobe？Adobe最新版本的批注功能在特定的PDF上好像有点问题，我尝试了几个都不能正常保存，总是提示错误110，无奈放弃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;android&#34;&gt;Android&lt;/h2&gt;
&lt;h3 id=&#34;flodersync&#34;&gt;Flodersync&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Flodersync.png&#34; alt=&#34;Flodersync&#34; /&gt;
&lt;a href=&#34;https://play.google.com/store/apps/details?id=dk.tacit.android.foldersync.lite&#34;&gt;&lt;strong&gt;Flodersync&lt;/strong&gt;&lt;/a&gt;是一款基于安卓平台的非常棒的一款应用，我们通过它来实现安卓平台的双向同步。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开启双向同步请取消勾选&lt;code&gt;不同步删除&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;moon&#34;&gt;Moon+&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/Moon.png&#34; alt=&#34;Moon+&#34; /&gt;
&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.flyersoft.moonreader&#34;&gt;&lt;strong&gt;Moon+&lt;/strong&gt;&lt;/a&gt;，静读天下，安卓平台上首屈一指的阅读器，支持格式众多，速度流畅，除了免费版有些功能阉割和广告之外，没有别的问题。&lt;/p&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年12月23日 初始发布&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Markdown &#43; Travis CI 构建自己的开源电子书</title><link>https://xuanwo.io/2015/08/12/opensourcebook/</link><pubDate>Wed, 12 Aug 2015 01:31:22 +0000</pubDate><guid>https://xuanwo.io/2015/08/12/opensourcebook/</guid><description>&lt;p&gt;作为一只ACMer，一个非常现实的需求就是我们需要准备自己的模板。在我的想象当中，我们的模板应当有如下的这些特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以生成PDF格式，保证在多个平台下的一致性&lt;/li&gt;
&lt;li&gt;编辑起来比较简单，我的队友无需学习LaTeX即可开始编辑&lt;/li&gt;
&lt;li&gt;共同协作比较方便，我和队友无需将代码互相复制粘贴&lt;/li&gt;
&lt;li&gt;代码必须要支持高亮！（很重要！）&lt;/li&gt;
&lt;li&gt;代码编辑容易，因为我们的模板白手起家，经常会需要修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些需求，单个实现都比较容易，但是如果想要找到一个全部符合并且简单易行的方案，就有些困难了。在&lt;a href=&#34;http://www.larrycaiyu.com/&#34;&gt;@larrycai&lt;/a&gt;推出的&lt;a href=&#34;https://github.com/larrycai/kaiyuanbook&#34;&gt;中文开源电子书项目&lt;/a&gt;的启发下，我想到了使用 &lt;code&gt;Markdown&lt;/code&gt; + &lt;code&gt;Github&lt;/code&gt; + &lt;code&gt;Travis CI&lt;/code&gt; 的一套工具链来构建了我的开源电子书的方法。
下面我来简单地介绍一下。&lt;/p&gt;
&lt;h1 id=&#34;实现方法&#34;&gt;实现方法&lt;/h1&gt;
&lt;p&gt;我的思路非常简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有文件使用Markdown进行编辑，代码文件以代码块的形式保存在Markdown文件中。&lt;/li&gt;
&lt;li&gt;原文件通过Git进行管理，通过Travis CI进行自动构建，并将生成的PDF文件以Release形式回传到Github上&lt;/li&gt;
&lt;li&gt;Travis CI调用multimarkdown将md文件转换为tex，再使用latex将tex编译为pdf&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整套流程看起来需要的操作很多，但是通过Travis CI进行自动构建，我们需要做的仅仅是push我们的代码，几分钟之后，最新编译的PDF就会出现在我们代码库的Release中。下面我详细地介绍一下实现的步骤。&lt;/p&gt;
&lt;h1 id=&#34;实现流程&#34;&gt;实现流程&lt;/h1&gt;
&lt;h2 id=&#34;fork我的模板&#34;&gt;Fork我的模板&lt;/h2&gt;
&lt;p&gt;第一步是需要先Fork我的&lt;a href=&#34;https://github.com/Xuanwo/OpenSourceBook&#34;&gt;模板&lt;/a&gt;，使用git将其clone到本地方便我们进行编辑，当然，库名可以随意修改，这个无需在意。&lt;/p&gt;
&lt;h2 id=&#34;配置travis-ci&#34;&gt;配置Travis CI&lt;/h2&gt;
&lt;h3 id=&#34;登陆travis-ci&#34;&gt;登陆Travis CI&lt;/h3&gt;
&lt;p&gt;访问&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;，点击使用Github账号登陆后，Travis CI将会获得访问你的公开库相关信息的权限。
&lt;em&gt;比较看重自己信息安全的朋友也无需担心，Travis CI默认获得的权限是非常的低的只读权限，而且只能访问你的公开库。&lt;/em&gt;
然后Travis CI将会列出你所有的公开库，我们在勾选&lt;code&gt;OpenSourceBook&lt;/code&gt;前面的按钮使得它打开自动构建。&lt;/p&gt;
&lt;h3 id=&#34;travis-yml文件配置&#34;&gt;.travis.yml文件配置&lt;/h3&gt;
&lt;p&gt;上一步中，我们打开了自动构建，也就是你的每一次push和pr都会触发Travis CI的自动构建。但是如果没有配置好的脚本，自动构建的结果通常都是失败的，所以我们要配置好相应的脚本。在我的库中已经有了配置好的脚本，只需要做一些细微的修改就可以应用于不同的库。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Travis CI十分强大，有想进一步了解Travis CI的同学可以通过&lt;a href=&#34;http://docs.travis-ci.com/&#34;&gt;文档&lt;/a&gt;来进一步的学习。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置github-release&#34;&gt;配置Github-Release&lt;/h3&gt;
&lt;p&gt;通过前面的操作，我们已经可以通过Travis CI来自动构建我们的PDF文件，但是这个文件并不能上传到Github上来，因为Travis CI默认是不会取得这样的权限的。为了解决这个问题，我们可以使用Github的Release API以及Travis CI的加密。&lt;/p&gt;
&lt;p&gt;首先我们需要一个ruby的环境，如果没有的话可以考虑使用&lt;a href=&#34;https://c9.io/&#34;&gt;Cloud9&lt;/a&gt;。
安装travis的gem包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xuanwo@ruby:~/workspace $ gem install travis
Fetching: addressable-2.3.8.gem (100%)
Successfully installed addressable-2.3.8
（中间省略）
Fetching: travis-1.8.0.gem (100%)
Successfully installed travis-1.8.0
18 gems installed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登陆Travis，需要使用Github的账号和密码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xuanwo@ruby:~/workspace $ cd OpenSourceBook/
xuanwo@ruby:~/workspace/OpenSourceBook (master) $
xuanwo@ruby:~/workspace/OpenSourceBook (master) $ travis login --auto
Shell completion not installed. Would you like to install it now? |y|
We need your GitHub login to identify you.
This information will not be sent to Travis CI, only to api.github.com.
The password will not be displayed.
Try running with --github-token or --auto if you don&#39;t want to enter your password anyway.
Username: Xuanwo
Password for Xuanwo: **********
Two-factor authentication code for Xuanwo: 147447
Successfully logged in as Xuanwo!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用Travis的Release-Guide生成相应的脚本代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xuanwo@ruby:~/workspace/OpenSourceBook (master) $ travis setup releases
Detected repository as Xuanwo/OpenSourceBook, is this correct? |yes|
//此处错误表明这个库是新建的，Travis CI还没有同步，手动同步即可。
repository not known to https://api.travis-ci.org/: Xuanwo/OpenSourceBook
xuanwo@ruby:~/workspace/OpenSourceBook (master) $ travis setup releases
Username: Xuanwo
Password for Xuanwo: **********
Two-factor authentication code for Xuanwo: 603930
//设定需要上传的文件名
File to Upload: OpenSourceBook.pdf
//设定只从当前库进行上传
Deploy only from Xuanwo/OpenSourceBook? |yes|
//设定进行API key加密（强烈要求）
Encrypt API key? |yes|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里，我们已经实现了一本电子书由Markdown到PDF的自动构建，下面我来具体的讲解一下如何使用。&lt;/p&gt;
&lt;h1 id=&#34;使用方法&#34;&gt;使用方法&lt;/h1&gt;
&lt;h2 id=&#34;触发release发布&#34;&gt;触发Release发布&lt;/h2&gt;
&lt;p&gt;由于Github的强制要求，所有发布都必须归属于某一个Tags，所以我们在push的时候，需要带上tags，生成的文件才能够上传到Github上去。具体的操作如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add --all
git commit -m &amp;quot;update content&amp;quot;
git tag -a v0.0.1 -m &amp;quot;tags content&amp;quot;
git push --tags
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件结构介绍&#34;&gt;文件结构介绍&lt;/h2&gt;
&lt;p&gt;所有的源代码文件都保存在&lt;code&gt;content&lt;/code&gt;文件夹下，所有文件都遵循&lt;a href=&#34;http://www.jianshu.com/p/q81RER&#34;&gt;Markdown语法&lt;/a&gt;。图片保存在&lt;code&gt;content/img&lt;/code&gt;目录下，调用时使用&lt;code&gt;![图片描述](img/pic.png)&lt;/code&gt;。
每一本书分为前言，内容和目录。其中&lt;code&gt;0-prefaceX-xxx.md&lt;/code&gt;表示前言的第X章，&lt;code&gt;1-chapterX-xxx.md&lt;/code&gt;表示正文的第X章，&lt;code&gt;2-appendixX-xxx.md&lt;/code&gt;表示附录的第X章，都是从1开始的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;目前为止，修改封面还需要修改Tex文件&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;跳过自动构建&#34;&gt;跳过自动构建&lt;/h2&gt;
&lt;p&gt;只是单纯想更新内容，不想生成PDF时，只需要在commit信息中添加&lt;code&gt;[ci skip]&lt;/code&gt;即可。比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;[ci skip] commit message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;更新日志&#34;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015年08月12日 初步完成教程&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>